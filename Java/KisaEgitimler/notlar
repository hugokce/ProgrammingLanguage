https://www.udemy.com/course/an-introduction-to-java-programming/learn/lecture/12336288?start=0#overview
1,5 saat

String name="Oliver"
name. dersek birçok method karşımıza gelir
name.charAt(5) desek r harfini verir Oliverın 5.karakteri. index 0dan başladığı için bu şekilde
String upper = name.toUpperCase();
System.out.println(upper);  ile hepsini büyük harfe çevirir

x=hello y=hello
x.equals(y)  true verir

diğer metodlara bakalım
name.length()
String a="leo\npard" dersek
bunu print edince leo bir üst satırda pard alt satırda olur

iki kere çift tırnak kullanılması gerekirse
String dialogue = "He said,\"hello\""; denilirs

tab atmak için araya \n kullanılır

name.substring(3,9)  3ten başlar 9a kadar gider 9 hariç

Arrayler
int[] numsA = {1,2,3,4,5}; bunu print edersek locationidsini verir
ancak Arrays.toString(numsA) dersek [1,2,3,4,5] olarak dönecektir
int[] numsB = new int[4]; bunu print edersek [4, -123,24,0] verir
int[4] dediğimiz için 4 eleman oluşması gerekir dördüncüyü 0 olarak verdi

int[][] board = new int[2][2]; 
board[0][0]=1;
board[0][1]=0;
board[1][0]=1;
board[1][1]=10
1 0
1 0 olarak görünür


ArrayList<> objesi
List<Integer> list = new ArrayList<Integer>();
list.add(3);
list.add(99);
list.add(-1);
list print dediğimizde [3,99,-1] verir
list.remove(index:2) 2 deyince index kendisi ekler
list.remove(new Integer(value:-1)); dersek -1 olan değeri siler
sadece [3,99] kalır

Indexer x = list.get(1) dersek bunu print edersek 99u verecektir

list.size() dersek 2 verecektir

Döngüler for - while

for (int i=0;      i<5;       i++){
     initial;condition; incrementer
     System.out.println(i);
}


int k=0,sum=0;
while (k<10) {
sum+=k;
k++;
}
System.out.println(sum);

list ve ArrayList import edilmeli yoksa çalışmaz main içine alttaki kodu yazalım
List<Integer> list = new ArrayList<>();
for (int i=0;i<1000;i++){
list.add(i);
}

int sum =0;
for (Integer num : list) {
System.out.println(num);
sum+=num
}
System.out.println(sum);

break ve continueya bakalım
int a=52;
while(true){
if (a%51 == a%13) {
System.out.println(a);
break;
else {
a++;
}  }  }


int a=52;
while(true){
if (a%51 == a%13) {
System.out.println(a);
continue;
else {
a++;
}  }  }  bu döngü bitmez

Static kelimesi için bir örnek
main içine de şunu yazalım
int c = (new Test()).sum(a:3,b:4);
System.out.println(c);

String cc=(new Test()).concat(a:"apple",b:"pie");
System.out.println(cc);

char a=get("apple");
System.out.println(a);  bu da l verir 3. karakter l dir apple için

main dışına bu methodu ekleyelim
public int sum(int a,int b){
return a+b;   3+4 7 verir
}
bunu da ekleyelim
private String concat(String a,String b){
return a+b;  applepie verir
}

private static char get(String str){
return str.charAt(3);
}

Şu şekilde de yazabiliriz method isimleri aynı olabilir a+b için

main içine de şunu yazalım
int c = (new Test()).sum(a:3,b:4);
System.out.println(c);

String cc=(new Test()).sum(a:"apple",b:"pie");
System.out.println(cc);

char a=get("apple");
System.out.println(a);  bu da l verir 3. karakter l dir apple için

main dışına bu methodu ekleyelim
public int sum(int a,int b){
return a+b;   3+4 7 verir
}
bunu da ekleyelim
private String sum(String a,String b){
return a+b;  applepie verir
}

private static char get(String str){
return str.charAt(3);
}

method isimleri concat yerine ikisinde de sum olacak şekilde değiştirdik
public static boolean imOK=true;  bu da static variabledır

Classes and Instance Variables
main içine yazalım kodlarımızı

Tiger dan = new Tiger(name:"daniel",weight:500);
dan.roar()
System.out.println(dan.roar());

main dışında class oluşturalım şimdi

class Tiger {
private int weight; // instance var
private String name;

public Tiger(String name;int weight) { //constructor
this.name=name;
this.weight=weight;
}
public String roar() {  //method
return name + " has roared";
}  }


Reference Types:
main içinde yazalım
int y =35;
String name = "Dan";
change(y);
System.out.println(y);

main dışında
private static void change(int x){
x=89;
}
sonuçta 89 değeri 35e döner

Az önce oluşturduğumuz Tiger için de ekleme yapsak main içine
Tiger dan = new Tiger(name:"dan",weight:250);
change(dan);
System.out.println(dan.name);

main dışına ekleyelim
private static void change(Tiger t) {
t.name="Oliver";
}

--------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/learn-how-to-use-all-50-java-keywords/learn/lecture/1916674?start=0#overview
1 saat
https://docs.oracle.com/javase/tutorial/

datatypes 9 --> boolean, byte,char, double, enum, float, int,long,short
byte -128 127 arası olabilir
char 1 karakter alabilir  'A' gibi. "A" olmaz
short -32768 ile 32767 arası olabilir
float 3.4444f
double 3.4444

enumeration:
public class EnumExample{
enum Menu {YES,NO,MAYBE}
public EnumExample(){
Menu options = Menu.NO;
options = Menu.YES;
}
psvm{
int noOrdinal = Menu.NO.ordinal();
Menu [] items = Menu.values();
Menu item = Menu.valueOf("YES");
}  }
ordinal değerlere sahiptir enum sıralı yani


flow control 15 --> return, if else,for continue, while do, switch case break default, try catch finally throw
listeden okuma için for
String[] countries={"US","Canada","Mexico"};
for (String country:countries){
print(country)
}

while loop
int count=10;
while (count<100){
print count;
count+=10;
}

do-while
do keywordu
count=10;
do {
count+=10;
print(count);
} while (count<100)

switch - case
psvm{
String month="Jan";
switch(month){
case "Jan":
print("Jan");
break
case "Feb":
print("Feb")
break;
default:
print("Other")
break;
} }


exceptions:
psvm{
FileReader fileInput=null;
try{
fileInput=new FileReader("Untitled.txt");
processFile(fileInput);
} catch (FileNotFoundException ex) {
print(file not found);
} catch (IOException ex){
print (IO Exception)
} finally {
fileInput.close();
print(cleanup done)
} }

psvm {
try (FileReader fileInput=new FileREader("untitled.txt")){
processFile(fileInput);
}
}
psv processFile(FileREader fileInput){
if (fileInput!=null){
} throw new UnsupportedOperationExecution("Not Supported");
}

Class Declaration and modifiers: 17
abstract,class,extends,final,implements,interface,native,private,protected,public,static,strictfp,synchronized,transient,throws,void,volatile,
overloading,overriding

Miscellaneous 9
assert,const,goto,package,import,instanceof,new,super,this

50 keyword

--------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/2-saatte-java-temellerine-hakim-olun/learn/lecture/23767866?start=0#overview
2 saat
değişkenler bellek içinde ayırdığımız alanlardır
ismiyle daha sonra onları çağırırız
long intten fazla sayi değeri tutar
double floattan daha fazla değer tutar
char 1 karakter tutar daha fazla karakter tutmak için
String tipinde olması gerek

Dışarıdan Veri almak
Scanner input = new Scanner(System.in);
fix import ile pakete ekleriz import Scanner der
sout(Lütfen tam sayı giriniz)
int sayi1=input.nextInt();
sout(sayi1);
bizden sayi1 istiyor
int sayi2=input.nextInt();
int toplam = sayi1+sayi2;
sout(toplam);
sout("Toplam: "+(sayi1+sayi2));

if blokları:
int sayi1=30;
int sayi2=20;

if(sayi1>sayi2){
sout("sayi1 büyüktür");
} else if (sayi1==sayi2){
sout("sayilar eşittir");
} else {
sout(sayi2 buyuktur);
}

Switch - Case Blokları:
Scanner input = new Scanner(System.in);
int sayi1=input.nextInt();
int sayi2=input.nextInt();
İşlem tipini giriniz
byte islem = input.nextByte();
switch(islem) {
case 1 :
sout(sayi1+sayi2);
break;
case 2 :
sout(sayi1-sayi2);
break;
case 3 :
sout(sayi1*sayi2);
break;
case 4 :
sout(sayi1/sayi2);
break;
default:
sout(hatalı bir sayı girdiniz)
break;
}

Döngüler
For döngüsü:
bir işlemi tekrar tekrar yapmak istersek,sayılarda dolaşmak istersek
kullanırız
for(int i=0;i<10;i++)   sayac=sayac+1 de yazilabilir
//i sayac değişkenidir
{
sout("Ekrana yazdır")  //10 defa ekrana yazdırır
print(i) //dersek sayaci yazdırırız
//ikiye bölünenleri bulmak istersek
// o zaman döngü içine if bloğu yazmamız gerekiyor
if(i%2==0){
sout(i);
} }
2,4,6,8,10 yazdırdı

While döngüsü
int sayac=1;
while (sayac<=10) {
sout(sayac);
sayac++;
}

CTRL+R R 2 kere R dersek tüm sayac değişkenlerini seçer
sonra bunları i ye çeviririz
While(true) örneği yapalım

Scanner input = new Scanner(System.in);
int sayi;
while(true){
System.out.print(lütfen sayi giriniz);
sayi=input.nextInt();
if(sayi==0){
break};
}
0 girene kadar sormaya devam eder

Do-While döngüsü:
önce 1 kere çalıştırır sonra koşulun sağlanmasını kontrol eder
Scanner input = new Scanner(System.in);
int sayi;
do {
sout(lütfen sayi giriniz);
sayi = input.nextInt();
} while(sayi!=0);

Dizi Kavramı:
matematikteki kümeler aklımıza gelebilir
aynı tipteki elemanları gruplarız dizilerde
//int sayi1=20;
//int sayi2=40; yerine 
//sayilar isimli dizi olsun
int[] sayilar = new int[5];  kaç eleman olsun istersek 
sayilar[0]=20;
sayilar[1]=40;
sayilar[2]=70;
sayilar[3]=50;
sayilar[4]=60;
sout(sayilar[4]);  60 yazdırması lazım
şu şekilde de tanımlayabilir
int[] sayilar = {20,40,50,70,60};
sout(sayilar[4]);  60 verecektir
stringlerden dizi oluşturalım
String[] ogrenciler {"Bahadır","Ali","Veli","Omer"};
//sout(ogrenciler[1]);
for(int i =0;i<4;i++){
sout(ogrenciler[i]);
}
bu şekilde öğrencileri yazdırırız

Metot Kavramı:
sürekli yaptımız işleri metota çevirip tekrar tekrar kullanırız
public static void kendiniTanit(){
sout(adin)
sout(soyadin)
}
 kendiniTanit(); dersek main içinde veri gelir

Parametreli Metotlar:
iki sayının ortalamasını veren metot
public static void ortalamaAl(int sayi1,int sayi2){
int toplam = sayi1+sayi2;
int ortalama = toplam/2;
sout(ortalama);
}

main içinde ortalamaAl(); dedik parametreleri vermemiz gerek
ortalamaAl(45,78);

int sayi1=60;
int sayi2=100;
ortalamaAl(sayi1,sayi2);

Geriye Değer Döndüren Metotlar:
iki sayı girelim ortalamasını versin
public static double ortalamaHesapla(int sayi1,int sayi2){
//değer döndüreceği için public static double dedik
int toplam=sayi1+sayi2;
int ortalama = toplam/2;
return ortalama;
//2 parametre istedik
}

ortalamaHesapla(45,70); bu değer vermez o yüzden 
sout(ortalamaHesapla(45,70)); dememiz gerek

--------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/array-and-vectors-in-java/learn/lecture/25395380?start=0#overview
1 saat
Array
int a[10];
datatype variablename[] = new datatype[size]
ya da 
datatype variablename[];
 variablename= new datatype[size];
int val[] = new int[5];
datatype arrayname[] = {val1,val2,val3...,valn};
int arr[]={1,2,3,4,5};

datatype arrayname[];
arrayname[index]=value;
int arr[];
arr[0]=10;

int arr[] = {8,6,2,4,9,3,1};
int size=arr.length;

Create Two dimensional array

first dimension row, second dimension column
datatype arrayname[][] = new datatype[size][size];
int arr[][]=new int[3][3];

int table[][] = new int[3][];
table[0]=new int[5];
table[1]=new int[2];
table[2]=new int[3];

Multidimensional Array
datatype arrayname[][][] = new datatype[size][size][size];
int a[][][] = new int[3][3][3];

int arr[] = {100,90,80,70,60,50};
for (int i=0;i<arr.length;i++){
sout(arr[i]);
}

Kullanıcıdan değer alıp arraya yazalım
Scanner s1 = new Scanner(System.in);
int arr[] = new int[5];
sout(eleman girin);
for (int i=0;i<arr.length;i++){
arr[i]=s1.nextInt();
sout(değerler şu şekilde);
for(int i =0;i<arr.length;i++)
sout(arr[i]);
}
5 eleman eklenince print kısmından print ediyor

Sorting Dimensional Array
Scanner s1 = new Scanner(System.in);
int arr[] = new int[10];
sout(eleman girin);
for (int i=0;i<arr.length;i++){
arr[i]=s1.nextInt();
sout(değerler şu şekilde);
for(int i =0;i<arr.length;i++)
{
for(int j =i+1;j<arr.length;j++)
{
if(arr[i]>arr[j])   < yaparsak küçükten büyüğe sıralar
{
int temp=arr[i];
arr[i]=arr[j];
arr[j]=temp;
}  }  } }
for(int i=0;arr.length;i++)
sout(arr[i]);

--------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/java-pc1/learn/lecture/4398138?start=0#overview
1,5 saat
(double)a ile type cast yapılır

psvm{
int n = 1; long ln=n;
sout(ln);
1 döner
char c = 'c';ln=c;
sout(ln);
99 döner
char c1=(char)ln;
sout(c1);
c döner
float f=3.2f;n=(int)f;
sout(n);
3 döner
double d=(int) f;
double d1=(char)f;
sout(d+","+d1+","+f);
3.0,3.0,3.2 döner
double d2=f;
sout(d2);
3.200000047683716 döner
}

diğer challenge;
pvsm{
int n=10;float f=2.5f;boolean b=false;
float f1=f/n;sout(f1);  0.25 döner
float f3=n/f;sout(f3); 4.0 döner
float f4=n/100;sout(f4);  0.0 döner
int n1=n/100;sout(n1) 0 döner
}

diğer challenge;
psvm{
int x=2,y=5;boolean b;
int n=x-y+y/x*(x*y++);
sout(n)   17 döner
double n1=--X -(y+y/x)*(--x*y);
sout(n1);  1.0 döner
b=!(n>x&&n1<y)?true:false;
sout(b);  false döner
}

Bölüm3 Selections if -else switch
if, nested if, if else, switch case
psvm {
String gs="";
char grade='A';
switch(grade){
case 'A':gs="Excellent";break;
case 'B':gs="Very Good";break;
case 'C':gs="Good";break;
case 'D':gs="Average";break;
case 'E':
case 'F':gs="Low performance";break;
default :gs="Invalid grade character;
}
sout(gs)
}

challenge büyük küçük harf değişimi yapar
package caseswap;
import java.util.*;
psvm{
Scanner sc=new Scanner(System.in);
Sout("Enter character");
char c=sc.next().trim().charAt(0);
if((int)c>=65&&(int)c<=90
sout((char)((int)c+32));
else if ((int)c>=97&&(int)c<=122)
sout((char)((int)c-32));
else 
sout(c);
}

challenge2
package betterif;
public class BetterIf{
psvm{
int BMI=20;
boolean diabetes=true;heartCheckEssential=false;
if(BMI>=25){
if(diabetes){
heartCheckEssential=true;
} else {
heartCheckEssential=false;
} } 
else if (BMI<25) heartChechEssential=false;
sout(Heartcheck needed);
sout(heartCheckEssential)
} }


ternary operator
challenge1
psvm{
int person=5;
sout((person>1)? 
	"They are":
	"He is")+ " going.");
}

challenge2
psvm{
double salary=600000;tax=0;
double slab1=250000;slab2=500000;
tax=(salary>slab1)?
	(salary>slab2)?(0.10*slab1+0.20*(salary-slab2))
	:0.10*(salary-slab1)
	:0;
sout("Tax on your salary ":salary+" would be "+tax);
}

Switch case
Challenge1
psvm{
int month=2;int year=2000;int days=0;
switch(month){
case 1:case 3:case 5:case 7:case 8:case 10:case 12:
days=31;break
case 4:case 6:case 9:case 11:
days=30;break;
case 2:
if(((year%4==0)&&!(year%100==0)) ||(year%400==0))
days=29;
else days=28;break;
default:
sout("Invalid mount");
}
sout("Days in month = " + days);
}

challenge2
psvm{
int wn1,wn2,res=0,num1=43,num2=4;
wn1=num1;wn2=num2;
for(int i =1;i<=4;i++)
switch(i) {
case 1 : sout(num1+"+"+num2+" =");
case 2: if(i==1) {sout(wn1+wn2);break}
sout(num1+"-"+wn2+" ="+(wn1-wn2));break;
case 3: for(int j=0;j<wn2;j++)res+=wn1;
sout(num1+"*"+num2+" = "+res);break;
case 4: res=0;
while(wn1>0){
wn1-=wn2;res++;
if(wn1<wn2)break;
}
sout(num1+"/"+num2+" = "+res);break;
} }

Bölüm4 Iteration
for(initialize counter;check limit;modify counter)
while(check condition)
foreach --> for (variable : array)

psvm{
int num=15;
sout("Divisors of number are");
for(int i=1;i<=num/2;i++)
{
if(num%i==0) sout(i);
} }

psvm{
int num=11;mul=1;
while(mul<=10)
{sout(num+"x"+mul+"\t= "+num*mul++);}
}

foreach loop
psvm{
String name="ABCDE";
char[] nm=name.toCharArray();
char res=0;
for(char c:nm) res+=c;
sout((char)(res/nm.length));
}

do-while 
psvm{
Scanner sc = new Scanner(System.in);
double ip=0,max=0;
do{
sout("enter positive number");
ip=sc.nextDouble();
if(ip>max) max=ip;
} while(ip>0);
sout("maximum value entered:"+max);
}

challenge1
psvm{
int sumodd=0,sumeven=0;
for(int i=1;i<=10;i++)
{
if(i%2==0) sumodd+=i;
else sumeven+=i;
}
sout("Sum odd"+sumodd+"\n"+"Sum Even="+sumeven);
}

challenge2
psvm{
char A='A';
for(int i=1;i<=3;i++)  satırın tekrarı
{
for(int j=1;j<=i;j++)  her satırın yazılması
{
sout(A+" "+(int) A+" ");
A++;
}
sout();
} }

challenge 3
psvm{
int fibo[] = new int[10];
fibo[0]=0;fibo[1]=1;
for(int i=2;i<10;i++)
fibo[i]=fibo[i-2]+fibo[i-1];
for(int i:fibo) sout(i+" ");
}

challenge4
psvm{
String name[]={"Raj","John","Maria"};
int[][] score={{65,79,82},{69,85,55},{55,71,75}};
int n=0,sum=0;
for(int i[]:score){
sout("Student "+(n+1)+":"+name[n]);
for(int j:i){
sout(j+" ");
sum+=j;
}
sout(sum/3+"%");
n++;
}
}


challenge5 while
psvm{
int month=1;
Scanner sc=new Scanner(System.in);
sout("Enter month of joining (1-12):");
month=sc.nextInt();
while(month<1 || month>12){
sout("error input re-do please");
month=sc.nextInt();}
sout("month entered correctly")
}

challenge 6
psvm{
String message="Gold delivered";
int key=232,i=0,dig=0,wk=0;
while(i<message.length()){
wk=key;
for(int j=0;j<3;j++){
dig=wk%10;
if(i==message.length()) break;
sout((char)(message.charAt(i++)+dig));
wk=wk/10;
}
}
sout();
}

challenge7 do-while
import java.util.*;
import java.text.DecimalFormat;
psvm{
double c;char ans;
DecimalFormat df= new DecimalFormat("#.00");
Scanner sc = new Scanner(System.in);
do{
sout("enter temperature in degree centigrade:");
c=sc.NextDouble();
sout(c+" degree centigrade =");
sout(df.format(c*1.8+32)+" Degree Fahrenheit);
sout("Try more reading (y/n)?");
ans=sc.next().charAt(0);
}
while(ans=='y'||ans='Y');
}

challenge 8
import java.util.*;
psvm{
char choice;
Scanner sc=new Scanner(System.in);
do{
sout("1.Say Hello");
sout("2.Say Namaste");
sout("3.Say Bonjour");
sout("4.Exit Silently");
sout("Enter choice (1/2/3/4):");
choice=sc.next().charAt(0);
if(choice=='1') {sout("Hello World");break;}
if(choice=='2') {sout("Namaste World");break;}
if(choice=='3') {sout("Bonjour World");break;}
} while(choice!=4);
}

sonunda pdf var
05-02+Reference+Links+Sheet.pdf indirildi
Java Documentation 
https://docs.oracle.com/en/java/ 
Java Language and Virtual Machine Specifications 
http://docs.oracle.com/javase/specs/ 
Java Community Page 
https://www.jcp.org/en/home/index 
Sunmitra Main Site 
http://www.sunmitra.com 
Sunmitra Education Facebook Group 
http://www.facebook.com/sunmitraedu 
A programming challenge site online 
https://www.hackerearth.com/practice-challenge/ 
This one is good simple online resource for java learning 
http://www.tutorialspoint.com/java/ 
This one may be liked by some people. 
http://javabeginnerstutorial.com/core-java/

--------------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/java-ile-nesne-tabanl-programlama-temelleri/learn/lecture/21116514?start=0#overview
1,5 saat

Araba a1 = new Araba(); dersek
a1 Araba sınıfının bütün özelliklerine sahiptir
Araba a2 = new Araba();

Araba sınıfına int x=10 dersek 
artık a1 ve a2nin bu x ile ilişkisi vardır
a1. dersek x gelir
bir sınıftan birden fazla nesne oluşturabiliriz a1 a2 gibi.
a1 ve a2 nesnelerdir
Araba() sınıftır
aynı paket içinde yer alan binekaractan nesne oluşturalım
binekArac ba1=new binekArac();
psvm dışındaki satırda class oluştursak
class Otomobil {
int c = 14;
} dersek bunu da nesneye atayalım
Otomobil o1= new Otomobil();
sout(o1.c);
14 olarak verecektir
üzerinde çalıştığımız dosyanın ismi public class olur
diğer oluşturduğumuz classlar için public yazılmaz yoksa karışır 

Class niteliği oluşturma ve niteliğe erişme
bir arabanın markası modeli vs olur
public class Araba{
String marka;
String model;
String renk;
Int beygirgucu;

psvm{}
Araba a1=new Araba();
a1.marka="Honda";   şimdi o niteliklere değer atayalım
a1.model="Civic";
a1.renk="beyaz";
a1.beygirgucu=110;
sout(a1.marka);  honda verir
Araba a2 = new Araba();
sout(a2.marka); null verir çünkü a2 için değer atamadık
ön tanımlı vermezsek null gelir Volvo dersek Volvo gelir
}

biz eğer final String marka="Volvo"; dersek ve a1 = new Araba() sonrası
nesneye atama yapmak istersek örneğin Honda dersek 
hata alırız çünkü final bizi engeller.

Biz bir nesneye atamadan classı çağırmak istersek hata alırız
sout(Araba.marka) dersek hata verir

Static Non-Static Nitelikler:
FAbrika projesinde calisanclassı oluşturduk
bu classın nitelikleri de
isim, soyisim, baslamaYili, bolum,maas
String isim;
String soyisim;
String baslamaYili;
String bolum;
double maas;   bu niteliklerin başında static olmadığı için
bu nitelikler non-statictir. Bu sebeple o sınıftaki niteliklere
o sınıftan bir örnek oluşturarak erişebiliriz
yani Calisan c1 = new Calisan(); gibi örnek oluşturmak lazım
çünkü bu nitelikler örneği ilgilendiren nitelikler değildir
sınıfın genelini ilgilendiren nitelikler değildir
psvm{
Calisan c1 = new Calisan();
c1.baslamaYili="2011";
c1.bolum="Yazılım";
c1.isim="Isa";
c1.soyisim="Acar";
c1.maas=3000;
}
Yani hangi örneğin ismini soyismini verecek bunlar örneği 
ilgilendiren nitelikler olduğu için non-statictir
Calisansayisi ekleyelim
calisan sayisi calisan sınıfının bir niteliğidir
calisan sınıfını niteler bireysel bazla örneği nitelemez
int calisanSayisi = 250; desek
bireysel olmadığını o sınıfı ilgilendirdiğini belirtmek için
başına static kelimesi ekleriz 
static int calisanSayisi = 250; bu classın niteliği oldu
bunun için örnek oluşturmaya gerek kalmaz
artık sout(Calisan.) dediğimizde bize calisanSayisi kendiliğinden
gelir örnek oluşturmaya gerek kalmaz

Static Non-Static Metotlar:
şimdi main dışında metot oluşturalım
public void bilgileriGoster() {
sout("Bilgiler: "+isim+"\n"+soyisim+"\n+baslamaYili+"\n"+bolum+"\n"+maas);
}
şimdi bilgileriGoster adinda örnek metodu oluşturduk
şimdi main içinde 
c1. dediğimizde bilgileriGoster() metodu da gelir
çünkü Calisan class içinde tanıttık ve onu da kapsadı
bu bilgileriGoster() bir örnek metodudur
bu metodu çalıştırabilmek için sınıf örneğini sınıf nesnesini
yani Calisan c1=new Calisan() şeklinde oluşturmak gerekir

şimdi de sınıf metodu oluşturalım
bir metodun başına static eklediğimiz zaman bu metot sınıf metodu
olacaktır. sınıfı ilgilendiren bir metotsa o metodun başına
static demek gerekir. static yazdığımız bir metotdan 
örnek oluşturmak zorunda değiliz böylece.
ismiyle de o metodu çağırabiliriz
şimdi çalışan sayısını gösteren bir sınıf metotu oluşturalım
static void calisanSayisi() {
sout("Calışan sayısı: "+calisanSayisi);
} yazdık
şimdi main içine gidelim
Calisan. dediğimiz zaman calisanSayisi metodu da 
calisanSayisi niteliği de geldi
bu static ile oluşturduğuımuz metot sınıf metodudur
çünkü başında static bulunmaktadır sınıfı ilgilendirmektedir

public void olan da non-static metottur public bir metotdur
bir örnek metodudur bu bilgileriGoster metodunu çağırmak için
mutlaka örnek oluşturmak gerekir calisan c1 = new calisan() şeklinde

Constructor metotlar:
bir sınıftan bir nesne oluştururken hangi kıstaslara göre 
oluşturacağımızı belirleyebildiğimiz bir metotdur
biz oluşturmasak da java oluşturur sınıfın adıyla aynı isme
sahiptir Calisan() constructor metottur biz bunu oluşturmadık
ama java oluşturmuş
şimdi bir constructor metot oluşturalım
public Calisan() {
} boş parametresiz bir constructor oluşturduk main dışında.
şimdi c1 ve c2 nesneleri oluşturalım bu constructor metottan
main içinde
Calisan c1=new Calisan();
Calisan c2=new Calisan();
c1.bolum="Personel";
c2.bolum="Yazılım";

şimdi içine parametre alan bir constructor metot yazalım
Bu sayede c1.bolum="Yazılım" şeklinde yazmaktan kurtuluyoruz
bir classta birden fazla constructor olabilir

public Calisan(String isim,String soyisim, String baslamaYili,
String bolum,double maas){
this.isim=isim;      this bir anahtar kelimedir örneği temsil eder
this.soyisim=soyisim;  
this.baslamaYili=baslamaYili;
this.bolum=bolum;
this.maas=maas;
} örneğin isim değişkeninin değeri constructor metot içinde
yazmış olduğumuz isim parametresinin değeridir demektir bu
this.isim=isim;
örneğin soyisim değişkeninin değeri constructor metor içinde 
yazmış olduğumuz soyisim parametresinin değeridir

Constructor belirleyince Calisan c1=new CAlisan(); 
bize hata fırlattı parametre istiyorum diyor. o yüzden this
eklemesi ile devam edip constructor tanımlamasına
devam ediyoruz
Eğer String isim yerine String name demiş olsaydık
{} içinde this kullanmamıza gerek kalmayacaktı
isim=name; diyecektik
nitelik=parametre 

şimdi c2yi şöyle oluşturalım main içinde
Calisan c2=new Calisan("Mehmet","A","2015","Yazılım",4000);
şeklinde oluşturabiliriz artık tek tek c2.bolum=Yazılım
gibi satır şeklinde yazmaya gerek yok
sout(c2.bolum )dediğimizde Yazılım karşımıza gelir
Yani constructor şunu sağlıyor bize
sınıftan bir örnek oluşturma esnasında istediğimiz değerlerle
bu örneği oluşturmamıza yarıyor
Constructor metotlar sınıfın ismiyle aynı ismi taşımak zorundadır
Aynı isimde sadece isim ve soyisim yer alan constructor da 
oluşturabiliriz
public Calisan(String isim,String soyisim){
this.isim=isim;
this.soyisim=soyisim;
}
Calisan c3=new Calisan("isa","acar");
sout(c3.isim); isa döndürdü

Erişim Sağlayıcılar:
public ifadesi bir erişim sağlayıcıdır
yine private ve protected da vardır.
public demek diğer sınıflardan da erişilebilir olduğunu gösterir
Şimdi bir class oluşturalım main dışında
class Yonetici{
String mezuniyet;


}

main içinde şunu yazalım
Yonetici y1=new Yonetici();
y1.mezuniyet="2020";
sout(y1.mezuniyet);  erişebilmemizin sebebi 
mezuniyetin public olmasıdır
şimdi private yaparsak mezuniyeti
private String mezuniyet; dersek
hata alırız private access uyarısı verir
protected String mezuniyet; dersek ulaşabiliriz
protected ise aynı paket içinde erişim sağlanabileceğini gösterir

bunu bir de metotlar için yapalım
public void goster(){sout("Mezuniyet: "+mezuniyet);}
şimdi main içinde y1. deyince goster metodu gelir karşımıza
y1.goster() çalıştırınca mezuniyet yılı 2020 diye geldi
private yaparsak hata alırız

Encapsulation:
Private verdiğim 
private String marka;
private int model;
marka üzerine gelip Refactor deyip Encapsulation field
diyoruz
Create Getter ve Create Setter seçiyoruz
bu getter ve setter metodları ortaya çıkıyor
setMarka() ile değişkene değer atamak için bu ibare kullanılıyor
değeri döndürmek için de GetMarkayı kullanıyoruz
getMarka da zaten return yapıyor sadece
şimdi az önce erişim sağlayamadığım classa gelelim
oto1. deyince karşımıza getMarka, getModel, setMarka, setModel
geldi onları kullanmamız lazım
oto1.setMarka("Honda");
oto1.setModel(2003);

ekrana yazdırmak için de
sout(oto1.getMarka())
sout(oto1.getModel()) diyoruz

kısaca encapsulation erişemediğimiz metot için
getter setter kullanıp atama yapıyoruz ve ekrana yazdırıyoruz
atama setter ile yazdırma getter ile
setModel()  getModel()

Miras Alma: Inheritance
Önce boş bir mainli class oluşturduk
ayrıca başka bir class daha oluşturalım
Aynı paket içinde Vasıta isimli class daha oluşturduk
ilk class içinde main dışında da oluşturabilirdik fark etmez
public class Vasıta{
String marka;
int model;
String renk;
double fiyat;

public void goster(){
sout(marka+" "+model+" "+renk+" "+fiyat);
}  }

ilk classta vasıta nesnesi oluşturalım main içinde
Vasıta v1=new Vasıta();
v1.marka="Honda";
Şimdi Vasıta nesneleri private yaparsak v1 patlar.
public class Vasıta{
private String marka;
private int model;
private String renk;
private double fiyat;

public void goster(){
sout(marka+" "+model+" "+renk+" "+fiyat);
}  }

şimdi encapsulationdaki getter setter işlemini yapmamız lazım
o yüzden sağ tıklayıp refactor deyip encapsulate field diyoruz
sonra getter setter seçiyoruz
Vasıta classındaki her sınıf niteliği için get ve set
metotları geldi
TEkrar mainli classa geldik
v1.setFiyat(100000); diyebiliriz
v1.setMarka("Honda");
v1.setModel(2003);
v1.setRenk("bordo");

v1.goster(); çağırdık tüm özellikleri gösterdi

Şimdi bir class daha oluşturalım
Vasıtanın tüm özellikleri olsun istiyoruz
hepsini yazmak zorunda mıyız tekrardan hayır
o halde Vasıta sınıfının tüm özelliklerini miras almak istiyoruz
o zaman Kamyondan sonra extends Vasıta diyoruz

public class Kamyon extends Vasıta{ 
}  kamyon classı oluştu ve Vasıta classından miras almış olduk

Şimdi mainli classa gelelim
Kamyon sınıfından bir nesne türetelim
Kamyon k1 = new Kamyon();
k1. deyince setMarka, get MArka vs hepsi geldi
k1.setMarka("Fatih");
k1.setModel(2010);
k1.setFiyat(2500000);
k1.setRenk("Sarı");
k1.goster(); diyelim tüm çıktılar geldi
Kamyona ek özellikler ekleyelim
public class Kamyon extends Vasıta{ 
int kapasite;
}  diyelim şimdi main de kapasiteyi de alalım

k1.kapasite=5000; şeklinde bu sefer kamyondan özellik aldık
private dersek de encapsulate edip
k1.setKapasite(5000); dememiz gerekiyor

Override:
şimdi yeni bir mainli class oluşturalım
main dışında class oluşturalım içinde de bir metot olsun
class Yonetici{
public void maasGoster(){sout(10000);} yöneticinin maaşını 10000 göstersin
}

bir de calisan sınıfı oluşturalım bu yonetici sınıfından miras alsın
class Calisan extends Yonetici{
}  içine birşey yazmıyoruz yoneticiden miras aldı zaten

şimdi main içinde yonetici classından nesne oluşturalım
sonra da çalışan sınıfından nesne oluşturalım

Yonetici y =new Yonetici();
Calisan c = new Calisan();

y. deyince maasGoster() isimli metot geldi
//y.maasGoster(); kapattık sonra
c. dedik yine maasGoster() geldi
c.maasGoster(); hem nitelikleri hem de metotları miras 
almış oldu çıktı olarak da 10000 verdi
ama  bu halde çalışanın da maaşı 10000 oldu aslında farklı olmalı
miras aldığı için aynı görünüyor.
o zaman şunu yapalım
çalışan sınıfından çağrıldığı zaman yöneticinin maaşını vermesin
başka bir çıktı versin kendi maaşını versin
o halde yoneticiden şunu kopyalayıp calisana alalım
public void maasGoster(){sout(5000);} olarak ekleyelim
o halde add override annotation geldi
add diyoruz başına @Override geldi şöyle oldu
class Calisan extends Yonetici{
@Override
public void maasGoster(){sout(5000);} 
}  şimdi tekrar 
c.maasGoster(); dersek artık 5000 verir

Override şu demektir
aynı isimli metotun farklı classlar içerisinde kullanılıp
farklı çıktılar alınmasına override denir

override yapabilmek için 3 koşulun sağlanması gerekiyor
2 class arasında miras alma ilişkisi olması gerekiyor
2 metot da aynı isme sahip olmalı
2 metotunda da parametrelerinin aynı olması gerekiyor

Overload:
Bir class içinde aynı isimli birden fazla metotun bulunmasıdır
Ancak bu metotlar farklı parametreler içermelidir
şimdi mainli bir class oluşturalım
topla metodu oluşturalım
metot int değer döndürmesi için başına int diyoruz
ayrıca static ekledik ki topla metodundan nesne üretmeden
kullanabilelim Ders18 class ismiyle bu metodu kullanabileceğiz
public deseydik o zaman ders 18 classından nesne üretip
o nesne vasıtasıyla metodu çağırmak gerekecekti
static int topla(int a,int b){   2 parametre alıyor a ve b
return a+b; diyoruz
}
şimdi bunu kopyalayıp int c ekleyelim
static int topla(int a,int b,int c){ return a+b+c; diyoruz
}
aynı isimli 2 metot var parametreleri farklı
şimdi doublelı ekleyelim
static double topla(double a,double b){ return a+b; diyoruz
}

Şimdi main içine gidip Ders18. deyince 3 metot geldi
hangisini seçeceğimizi soruyor
sout(Ders18.topla(3,5)); dedik
sout(Ders18.topla(3,5,7)); 
sout(Ders18.topla(3.2,5.3)); 

hepsinin toplamlarını verdi bu işlem overloading işlemidir

------------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/draft/1901886/learn/lecture/12880730?start=0#overview
38 dakika
Lambda expression
Javascript örneği
fonksiyonu variablea eşitliyoruz
var sumOfN = function(n)
{
return n*(n+1)/2;
}
print("Sum of first 5: "+ sumOfN(5));
15 verdi

Java örneği
public class SumofNDemo
{
private static class LoopSumofN implements SumofN
{
@Override
public int sum(int n)
{
int sum =0;
for(int i = 1;i<=n;i++)
{
sum=sum+i;
} return sum;
}
}
public static void main(String[] args)
{
SumofN sumOfNLoop = new LoopSumOfN();
sout(sumOfNLoop.sum(5));
SumofN sumOfNFormula = new SumOfN()
{
@Override
public int sum(int n)
{
return n*(n+1)/2;
}
};
sout("Sumof 10" +sumOfNFormula.sum(10) );
}  }

Lambda expression
(parameters) -> Expression / Block of statements
x-> x*x
x->{return x+10;}
(int x)->x>1000 && x<=2000

(int x,int y)-> {
x=x+y;
return x;
}

()->{sout("No Parameter");}

Örnek lambda
public class LambdaExpressionDemo1
{
psvm{
SumofN sumOfNImpl=(n)-> {return (n*(n+1))/2;};
sout(sumOfNImpl.sum(100));
}
}

Genericler, classları ve metotları tüm data tipleri ile çalışabilir 
hale getiriyor 
<Type> return-type Method-Name(parameter list)
örneklere bakalım
<T> void Display(T value)
<T1,T2> void Display(T1 x,T2 y)
<T> void Display(T x, int y)
<T> T GetValue()

generic class örneği
class MyGenericClass <T>
{}

class MyGenericClass <T1,T2>
{}

Örnek yapalım
class GenericMethodDemo{
static <T> void Display(T value)
{
sout("Value= "+value);
}
psvm
{
Display(10);
Display(true);
Display("GEneric MEthod Example");
} }

try{
statement
}
catch (exceptionclass name)
{
statement
}

int num=100;
try
{
num=num/value;
sout(value);
}
catch(ArithmeticException e)
{
sout("Inside catch block ");
sout("exception details "+e);
}

----------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/learn-natural-language-processing-with-corenlp-in-java/learn/lecture/12967314?start=0#overview
1,5 saat
NLP Java 
https://nlp.stanford.edu
javatraineronline.com
dineshkrishnan.com

IntellijIDEA üzerinden gidiyor
Maven Project açtık
nlp-example dedik proje adına
pom dosyasına gelip
dependency ekliyoruz
dependency
groupId edu.stanford.nlp
artifact stanford-corenlp
version 3.9.2
dependency

dependency
groupId edu.stanford.nlp
artifactIf stanford-corenlp
version 3.9.2
classifier models
dependency

Creating a Pipeline

Şimdi yeni paket oluşturalım adına com.dineshkrish.nlp diyelim
içine class ekleyelim  Pipeline diyelim adına
public class Pipeline{
private static Properties properties;
private static String propertiesName = "tokenize,ssplit,pos,lemma,ner,parse,sentiment";
private static StanfordCoreNLP stanfordcoreNLP;

private Pipeline(){

}

static {
properties = new Properties();
properties.setProperty("annotators",propertiesName);
}

public static StanfordCoreNLP getPipeline(){
if (stanfordCoreNLP ==null) {
stanfordCoreNLP = new StanfordCoreNLP(properties);
}
return stanfordCoreNLP ;
}
}

Şimdi TokenizeExample adında yeni bir class oluşturalım
public class TokenizeExample{
psvm{

StanfordCoreNLP = stanfordCoreNLP = Pipeline.getPipeline();
String text = "Hey! This is Dinesh Krishnan";

CoreDocument coreDocument = new CoreDocument(text);
stanfordCoreNLP.annotate(coreDocument);

List<CoreLabel> coreLabelList = coreDocument.tokens();

for(CoreLabel coreLabel : coreLabelList)
{
sout(coreLabel.originalText());
}
}
}

şimdi çalıştıralım
kelimelerin ayrıştığını gördük

Sentence Analizi
Şimdi yeni class oluşturalım adına SentenceRecognizer diyelim
public class SentenceRecognizer{
psvm{
StanfordCoreNLP stanfordCoreNLP = Pipeline.getPipeline();
String text = "Hey! This is Dinesh Krishnan. I am Software Developer and Consultant.";
CoreDocument coreDocument = new CoreDocument(text);
stanfordCoreNLP.annotate(coreDocument);
List<CoreSentence> sentences = coreDocument.sentences();
for (CoreSentence sentence : sentences){
sout(sentence.toString());
}
}
}

Şimdi çalıştıralım classı ve cümlelere göre ayrıldığını görelim
Part of Speech POS
propertiesName içine şimdi de pos ekledik
Şimdi yeni bir class ekleyelim ve adını POSExample koyalım
public class POSExample{
psvm{
StanfordCoreNLP stanfordCoreNLP = Pipeline.getPipeline();
String text = "Hey! This is Dinesh Krishnan.";
CoreDocument coreDocument = new CoreDocument(text);
stanfordCoreNLP.annotate(coreDocument);
List<CoreLabel> coreLabelList = coreDocument.tokens();
for (CoreLabel coreLabel: coreLabelList){
String pos = coreLabel.get(CoreAnnotations.PartOfSpeechAnnotation.class);
sout(coreLabel.originalText()+" = "+pos);
}
}
}
Şimdi çalıştıralım ve sonucunu görelim

Lemmatization:
şimdi propertiesName içine lemma ekledik
Şimdi yeni bir class oluşturalım adına LemmaExample diyelim
public class LemmaExample{
psvm{
StanfordCoreNLP stanfordCoreNLP = Pipeline.getPipeline();
String text = "I am trying to learn new technologies.";
CoreDocument coreDocument = new CoreDocument(text);
stanfordCoreNLP.annotate(coreDocument);
List<CoreLabel> coreLabelList = coreDocument.tokens();
for (CoreLabel coreLabel: coreLabelList){
String lemma = coreLabel.lemma();
sout(coreLabel.originalText()+" = "+lemma);
}
}
}
şimdi çalıştıralım

Named Entity Recognizer(NER):
şimdi propertiesNamee ner ekledik
yeni bir class ekleyelim ve adına NERExample diyelim
public class NERExample{
psvm{
StanfordCoreNLP stanfordCoreNLP = Pipeline.getPipeline();
String text = "Hey! My name is Dinesh Krishnan and I have friend his name is Robert."+
" We both are living in New York";
CoreDocument coreDocument = new CoreDocument(text);
stanfordCoreNLP.annotate(coreDocument);
List<CoreLabel> coreLabels = coreDocument.tokens();
for (CoreLabel coreLabel: coreLabels){
String ner = coreLabel.get(CoreAnnotations.NamedEntityTagAnnotation.class);
sout(coreLabel.originalText()+" = "+ner);
}
}
şimdi çalıştıralım

Sentiment Analysis:
yine propertiesName içine parse ve sentiment ekliyoruz
şimdi yeni class oluşturalım adına SentimentAnalysis diyelim
public class SentimentAnalysis{
psvm{
StanfordCoreNLP stanfordCoreNLP = Pipeline.getPipeline();
String text = "Hello this is John. I don't like this place.";
CoreDocument coreDocument = new CoreDocument(text);
stanfordCoreNLP.annotate(coreDocument);
List<CoreSentence> sentences = coreDocument.sentences();
for (CoreSentence sentence: sentences){
String sentiment = sentence.sentiment();
sout(sentiment+"\t"+sentence);
}
}

şimdi çalıştıralım
sonra really dont like yaptık negativee döndü

Spring Boot CoreNLP Integration :
Yeni bir Spring Initializer projesi oluşturduk
group com.dineshkrish
artifact ner-application dedik
sonra çıkan pencerede web seçtik
template enginde thymeleaf seçtik
pom içine dependency ekliyoruz
dependency ekliyoruz
dependency
groupId edu.stanford.nlp
artifact stanford-corenlp
version 3.9.2
dependency

dependency
groupId edu.stanford.nlp
artifactIf stanford-corenlp
version 3.9.2
classifier models
dependency
ekledik

Yeni bir paket ekledik adına controller dedik
içine class ekledik NERcontroller dedik
class dışına şunlar ekledik paket altına
@RestController
@RequestMapping(value = "/api/v1")
şimdi class içine yazalım
public class NERcontroller {
@PostMapping
@RequestMapping(value = "/ner")
public List<String> ner(@RequestBody final String input,@RequestParam final Type type){

return null;

}
}


yeni paket ekledik adına model dedik
İçine Enum tipinde class ekleyelim adına Type diyelim
public enum Type{
PERSON("Person"),
CITY("City"),
STATE_OR_PROVINCE("State_Or_Province"),
COUNTRY("Country"),
EMAIL("Email"),
TITLE("Title");

private String type;

Type(String type){
this.type=type;
}
public String getName(){
return type;
}
}

şimdi yeni bir paket daha ekliyoruz adına core diyoruz
içine Class ekleyelim adına Pipeline diyoruz başa servis ekledik
@Service 
public class Pipeline{
private static Properties properties;
private static String propertiesName = "tokenize,ssplit,pos,lemma,ner";
private static StanfordCoreNLP stanfordcoreNLP;

private Pipeline(){
}

static {
properties = new Properties();
properties.setProperty("annotators",propertiesName);
}

@Bean(name = "stanfordCoreNLP")  sonradan ekledik
public static StanfordCoreNLP getInstance(){
if(stanfordCoreNLP==null) {
stanfordCoreNLP = new StanfordCoreNLP(properties);
}
return stanfordCoreNLP;
}
}


Şimdi nerController classına geri dönelim eklemeler yapalım

@RestController
@RequestMapping(value = "/api/v1")
şimdi class içine yazalım
public class NERcontroller {

@Autowired
private StanfordCoreNLP stanfordCoreNLP;

@PostMapping
@RequestMapping(value = "/ner")
public Set<String> ner(@RequestBody final String input,@RequestParam final Type type){

CoreDocument coreDocument = new CoreDocument(input);
stanfordCoreNLP.annotate(coreDocument);
List<CoreLabels> coreLabels = coreDocument.tokens();

return new HashSet<>(collectList(coreLabels,type));

}

private List<String> collectList(List<CoreLabel> coreLabels,final Type type){

return coreLabels
.stream()
.filter(coreLabel -> type.getName().equalsIgnoreCase(coreLabel.get(CoreAnnotations.NamedEntityTagAnnotation.class)))
.map(CoreLabel::originalText)
.collect(Collectors.toList());
}
}


şimdi NerApplicationı çalıştıralım
public class NerApplication{
psvm{
SpringApplication.run(NerApplication.class,args);
}
}

Postman ile bakıyoruz
URL istiyor şunu yazalım
http://localhost:8080/api/v1/ner  PERSON seçtik
this is Dinesh dedik Dinesh seçti
this is Dinesh and my friend name is Robert dedik
this is Dinesh, I am from India.  country seçince geldi

şimdi ner-application altında src resources altında templates var
new html file diyelim index.html adına verelim
title NER Application title
<link rel="stylesheet" 
href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
dedik
body içine yazalım

<body>
<form>
<div class="container">
<h3>Input</h3>
<div class = "form-group">
<label for="input"> Enter Your Text Here!</label>
<textarea id="input" class="form-control" rows="4"></textarea>
</div>
<div class="form-group">
<label for="type"> Select Type</label>
<select class = "form-control" id="type" onchange="ner(this.value)">
<option value = "">Select Type</option>
<option value = "PERSON">Person</option>
<option value = "CITY">City</option>
<option value = "STATE_OR_PROVINCE">State or Province</option>
<option value = "COUNTRY">Country</option>
<option value = "TITLE">(Job) Title</option>
<option value = "EMAIL">Email</option>
</select>
</div>
<h3>Output</h3>
<div clas="form-group" id="result"></div>
</div>
</form>

<script type="text/javascript">
function ner(type){
var input = $("#input").val();
$.ajax({
type:'POST',
url:"http://localhost:8080/api/v1/ner?type="+type,
contentType:'text/plain; charset=utf-8',
data:input,
success:function(response){
var result = "";
$.each(response,function(index,value){
result=result+"<span class='badge badge-success'>"+value+"</span>&nbsp;";
})
$("#result").html(result);
}
});
}
</script>


Şimdi NERApplication çalıştıralım

this is Dinesh yazdık Person seçtik
Hey! Hello everyone, My name is Dinesh Krishnan, I am from Chennai, India.
I am Software Developer and Consultant. feel free to reach me via 
dineshk.training@gmail.com
şimdi tüm senaryoları deneyelim


-----------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/java-for-beginners-step-by-step/learn/lecture/10052462?start=0#overview
1,5 saat
Eclipse ile anlatım var
java decompiler gerekirse JD-GUI güzel
EA_5 ekran görüntüsü var
Notes_ExceptionHandling.pdf indirildi
Class objectleri tanımlamak için olan bir templatetir
public class AccountHolder{
String firstName;
String lastName;
int age;
float accountBalance;
boolean eligibleForCreditCard;
public void testEligibilityForCreditCard(){
if(age>25&&accountBalance>=20000) {
eligibleForCreditCard=true;
}  } }


public class AccountHolderObjects{
psvm{
AccountHolder tom = new AccountHolder();
AccountHolder henry = new AccountHolder();
AccountHolder sarah = new AccountHolder();

tom.firstName="Tom";
tom.lastName="Smith";
tom.age=21;
tom.accountBalance=10000;
tom.testEligibilityForCreditCard();
sout("Is Tom Eligible for CC :"+tom.eligibleForCreditCard);
//sonuç olarak false verecek şartları sağlamadı çünkü
// herny için bakalım bir de 

henry.firstName="Henry";
henry.lastName="Hill";
henry.age=31;
henry.accountBalance=20000;
henry.testEligibilityForCreditCard();
sout("Is Henry Eligible for CC :"+henry.eligibleForCreditCard);
// true verecek 
}
}

Exception Handling:
public class ExceptionHandlingDemo {
psvm{
try {
sout(hello world);
int i = 1/0;
sout(completed);
}
catch(Exception exp){   //exp istediğimizi kısaltmayı verebiliriz
sout("I am inside catch block")  // üst taraf hata verince bunu yazdırdı
sout("Message is : "+exp.getMEssage());   //  / by zero verdi
sout("Cause is: "+exp.getCause());       //  null verdi
exp.printStackTrace();   
} 
finally {
sout("I am inside finally block");
}
} }

Şu şekilde de yazabiliriz

public class ExceptionHandlingDemo {
public static void main(String[] args){
try{
demo();
} catch (Exception e) {
e.printStackTrace();
}
}

public static void demo() throws Exception{
sout(hello world);
throw new ArithmeticException("not valid operation");
//int i = 1/0;
//sout(completed);
} }

----------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/easy-to-follow-java-programming/learn/lecture/7380092?start=0#overview
1,5 saat

Value replacing exercise
public class Replace{
psvm{
int first = 7;
int second=9;
sout("first= "+first+" second="+second);
} }

Glass exercise
public class Replace{
psvm{
int first = 7;
int second=9;
int third;
third=second;
second=first;
first=third;
sout("first= "+first+" second="+second);
} }
şimdi yer değiştirdiler first ve second

Temperature Exercise:
F = 9/5C + 32
yeni class oluşturalım
public class Temperature{
psvm{
sout("Give Celcius value:")
Scanner sc = new Scanner(System.in);
double celcius = sc.nextDouble();
int fahrenheit =9.0/5.0*celcius+32;
sout("Fahrenheit: "+fahrenheit);
} }

Boiling Exercise:

public class Boiling{
psvm{
sout("give in the temperature: ");
Scanner sc = new Scanner(System.in);
int temp = sc.nextInt();
if(temp>=100){
sout("The water is boiling.");
} else {
sout("The water is not boiling.")
}}}

Boiling and Freezing exercise:
public class BoilingAndFreezing{
psvm{
sout("give in the temperature: ");
Scanner sc = new Scanner(System.in);
int temp = sc.nextInt();
if(temp>=100){
sout("The water is boiling.");
} else {
if (temp<=0){
sout("water is freezing");
} else { sout("water is in normal state.");
}}
}}

daha kısa yazalım
public class BoilingAndFreezing{
psvm{
sout("give in the temperature: ");
Scanner sc = new Scanner(System.in);
int temp = sc.nextInt();
if(temp>=100){
sout("The water is boiling.");
} else if (temp<=0){
sout("water is freezing");
} else { 
sout("water is in normal state.");
}
}}

Logic Operators:
Java 0<temp<100 anlamaz
if(0<temp && temp<100) şeklinde anlar

Fighting Exercise:
Attributelar AttackPoints AP, Defense Points DP
Damage D ve LifePoints LP
Fight one round

public class Fighting {
psvm {
Scanner sc = new Scanner(System.in);
sout("Attack Points of Monster: ");
int monsterAttack = sc.nextInt();

sout("Defense Points of Monster: ");
int monsterDefense = sc.nextInt();

sout("Damage of Monster: ");
int monsterDamage = sc.nextInt();

sout("Life Points of Monster: ");
int monsterLife = sc.nextInt();


sout("Your Attack Points: ");
int yourAttack = sc.nextInt();

sout("Your Defense Points: ");
int yourDefense = sc.nextInt();

sout("Your Damage: ");
int yourDamage = sc.nextInt();

sout("Your Life Points: ");
int yourLife = sc.nextInt();

Şimdi randomnumber oluşturalım
Random generator = new Random();
boolean attacker = generator.nextBoolean();

if(attacker) {
sout("You attack");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = yourAttack+dice;
sout("Rolled Values: "+dice);
sout("Your attack Value: "+attackValue);
if (attackValue>monsterDefense){
sout("Your attack was successful.");
monsterLife = monsterLife - yourDamage;
sout("Monster's remaining Life Points: "+monsterLife);
} else {
sout("Your attack was not successful.");
}
} else {
sout("Monster attacks.");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = monsterAttack+dice;
sout("Rolled Values: "+dice);
sout("Monster's attack Value: "+attackValue);
if (attackValue>yourDefense){
sout("Monster's attack was successful.");
yourLife = yourLife - monsterDamage;
sout("Your remaining Life Points: "+yourLife);
} else {
sout("Monster's attack was not successful.");
}
}
}

şimdi çalıştıralım  APM 5 DPM 10 DM 3 LPM 40 
YAP 10 YDP 25 YD 6 YLP 40 dedik

Looplar:
do {
statement 1;
statement 2;
statement 3;
} while(condition);

public class check_a_die{
psvm{
Scanner sc = new Scanner(System.in);
int die;
do {
Sout("Please give the value of the die:");
die=sc.nextInt();
if(die<1 || die>6) {
sout("The value of the die is bad.");
}
} while (die<1 || die>6);
} }


Lets fight until death exercise:
ÜStteki monster kodlarını alalım

public class Fighting {
psvm {
Scanner sc = new Scanner(System.in);
sout("Attack Points of Monster: ");
int monsterAttack = sc.nextInt();

sout("Defense Points of Monster: ");
int monsterDefense = sc.nextInt();

sout("Damage of Monster: ");
int monsterDamage = sc.nextInt();

sout("Life Points of Monster: ");
int monsterLife = sc.nextInt();


sout("Your Attack Points: ");
int yourAttack = sc.nextInt();

sout("Your Defense Points: ");
int yourDefense = sc.nextInt();

sout("Your Damage: ");
int yourDamage = sc.nextInt();

sout("Your Life Points: ");
int yourLife = sc.nextInt();

sc.nextLine();

Şimdi randomnumber oluşturalım
Random generator = new Random();

do {
boolean attacker = generator.nextBoolean();

if(attacker) {
sout("You attack");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = yourAttack+dice;
sout("Rolled Values: "+dice);
sout("Your attack Value: "+attackValue);
if (attackValue>monsterDefense){
sout("Your attack was successful.");
monsterLife = monsterLife - yourDamage;
sout("Monster's remaining Life Points: "+monsterLife);
} else {
sout("Your attack was not successful.");
}
} else {
sout("Monster attacks.");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = monsterAttack+dice;
sout("Rolled Values: "+dice);
sout("Monster's attack Value: "+attackValue);
if (attackValue>yourDefense){
sout("Monster's attack was successful.");
yourLife = yourLife - monsterDamage;
sout("Your remaining Life Points: "+yourLife);
} else {
sout("Monster's attack was not successful.");
}
sout("Press Enter to continue.");
sc.nextLine();
} while (yourLife>0 && monsterLife >0);
if (monsterLife>0) {
sout("You are dead. RIP. :-(")
}
if (yourLife>0) {
sout("You won. The Monster is dead.")
}
}
}
şimdi çalıştıralım
10 20 4 20 
20 30 5 60 dedik

while loop:
while(condition) {
statement1;
statement2;
statement3;
}

Returns number between 0-9
int nxt = ran.nextInt(10);

public class Counting {
psvm{
Random generator = new Random();
int die= generator.nextInt(6)+1;   0dan başladığı için 1 ekliyoruz  
int count=0;
while (die!=6) {
sout(die + " is rolled");
count++;
die=generator.nextInt(6)+1;
}
sout("You had to roll "+count+ " times before getting a 6.");
}
}

şimdi çalıştıralım 

switch syntax:
variable int, String char ve enum olabilir
switch(variable) {
case 1 :  az sayıda durum için uygundur toplama çıkarma çarpma bölme mesela
statement1;
statement2;
break;

case 2 :
statement3;
statement4;
break;
...
default
statement5;
break;
}

ama yaş gruplarını isimlendirme dersek uğraştırıcı olur

Run Away Exercise:
Şimdi fighting exercisea dönelim
Bir önceki exercise kopyalayıp devam ediyoruz

public class Fighting {
psvm {
Scanner sc = new Scanner(System.in);
sout("Attack Points of Monster: ");
int monsterAttack = sc.nextInt();

sout("Defense Points of Monster: ");
int monsterDefense = sc.nextInt();

sout("Damage of Monster: ");
int monsterDamage = sc.nextInt();

sout("Life Points of Monster: ");
int monsterLife = sc.nextInt();


sout("Your Attack Points: ");
int yourAttack = sc.nextInt();

sout("Your Defense Points: ");
int yourDefense = sc.nextInt();

sout("Your Damage: ");
int yourDamage = sc.nextInt();

sout("Your Life Points: ");
int yourLife = sc.nextInt();

sc.nextLine();
boolean runaway = false;
Şimdi randomnumber oluşturalım
Random generator = new Random();

do {
boolean attacker = generator.nextBoolean();

if(attacker) {
sout("You attack");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = yourAttack+dice;
sout("Rolled Values: "+dice);
sout("Your attack Value: "+attackValue);
if (attackValue>monsterDefense){
sout("Your attack was successful.");
monsterLife = monsterLife - yourDamage;
sout("Monster's remaining Life Points: "+monsterLife);
} else {
sout("Your attack was not successful.");
}
} else {
sout("Monster attacks.");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = monsterAttack+dice;
sout("Rolled Values: "+dice);
sout("Monster's attack Value: "+attackValue);
if (attackValue>yourDefense){
sout("Monster's attack was successful.");
yourLife = yourLife - monsterDamage;
sout("Your remaining Life Points: "+yourLife);
} else {
sout("Monster's attack was not successful.");
}
sout("Press Enter to continue. (Or type in 'run' to run away)");
command variablea saklayalım
String command = sc.nextLine();
switch (command) {
case "run":
sout("You ran away. You coward! -4 Life Points!");
yourLife-=4;
runaway=true;
break;
default:

}
} while (yourLife>0 && monsterLife >0 && !runaway);
if (yourLife<=0) {
sout("You are dead. RIP. :-(")
}
if (monsterLife<=0) {
sout("You won. The Monster is dead.")
}
}
}

şimdi çalıştıralım
99 99 5 50
10 20 3 15

Monster name generator exercise:
üstteki kodu alalım


public class Fighting {
psvm {
Scanner sc = new Scanner(System.in);
Random generator = new Random();   buraya taşıdık

String monsterName;  monster adını oluşturalım
int num = generator.nextInt(5);
switch (num) {
case 0: monsterName = "Black Daemon"; break;
case 1: monsterName = "The Rabbit"; break;
case 2: monsterName = "Silver Dragon"; break;
case 3: monsterName = "Mountain Troll"; break;
case 4: monsterName = "Alien"; break;
default: monsterName = "N/A"; break;
}

sout("Attack Points of "+monsterName+": ");
int monsterAttack = generator.nextInt(8)+1; 
sout(monsterAttack);

sout("Defense Points of "+monsterName+": ");
int monsterDefense = generator.nextInt(15)+3;
sout(monsterDefense);

sout("Damage of "+monsterName+": ");
int monsterDamage = generator.nextInt(3)+1;
sout(monsterDamage);

sout("Life Points of "+monsterName+": ");
int monsterLife = generator.nextInt(20)+15;
sout(monsterLife);


sout("Your Attack Points: ");
int yourAttack = generator.nextInt(6)+5;
sout(yourAttack);

sout("Your Defense Points: ");
int yourDefense = generator.nextInt(10)+6;
sout(yourDefense);

sout("Your Damage: ");
int yourDamage = generator.nextInt(3)+2;
sout(yourDamage);

sout("Your Life Points: ");
int yourLife = generator.nextInt(20)+25;
sout(yourLife);

//sc.nextLine();
boolean runaway = false;



do {
boolean attacker = generator.nextBoolean();

if(attacker) {
sout("You attack");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = yourAttack+dice;
sout("Rolled Values: "+dice);
sout("Your attack Value: "+attackValue);
if (attackValue>monsterDefense){
sout("Your attack was successful.");
monsterLife = monsterLife - yourDamage;
sout(monsterName +"'s remaining Life Points: "+monsterLife);
} else {
sout("Your attack was not successful.");
}
} else {
sout(monsterName +" attacks.");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = monsterAttack+dice;
sout("Rolled Values: "+dice);
sout(monsterName +"'s attack Value: "+attackValue);
if (attackValue>yourDefense){
sout(monsterName+"'s attack was successful.");
yourLife = yourLife - monsterDamage;
sout("Your remaining Life Points: "+yourLife);
} else {
sout(monsterName+"'s attack was not successful.");
}
sout("Press Enter to continue. (Or type in 'run' to run away)");
command variablea saklayalım
String command = sc.nextLine();
switch (command) {
case "run":
sout("You ran away. You coward! -4 Life Points!");
yourLife-=4;
runaway=true;
break;
default:

}
} while (yourLife>0 && monsterLife >0 && !runaway);
if (yourLife<=0) {
sout("You are dead. RIP. :-(")
}
if (monsterLife<=0) {
sout("You won. The "monsterName+" is dead.")
}
}
}

Şimdi çalıştıralım

for loop syntax
for (initialization; condition; increment) {
statement1;
statement2;
statement3;
}

for (int i=0; i<3; i++) {
statement1;
statement2;
statement3;
}

for sonucunda i değeri remove edilir
while olunca i yi devamında kullanabiliriz farklardan biri de bu
for (int i=0; i<3; i++) {
statement1;
statement2;
statement3;
}

int i=0
while ( i<3) {
statement1;
statement2;
statement3;
i++
}

Şimdi 3 tane monster ile savaşalım

Fighting kodlarını tekrar alalım


public class Fighting {
psvm {
Scanner sc = new Scanner(System.in);
Random generator = new Random();   buraya taşıdık

Bizim puanları tekrar etmesin diye başa aldık
sout("Your Attack Points: ");
int yourAttack = generator.nextInt(6)+5;
sout(yourAttack);

sout("Your Defense Points: ");
int yourDefense = generator.nextInt(10)+6;
sout(yourDefense);

sout("Your Damage: ");
int yourDamage = generator.nextInt(3)+2;
sout(yourDamage);

sout("Your Life Points: ");
int yourLife = generator.nextInt(20)+25;
sout(yourLife);


for (int i=0;i<3;i++) {  bunun kapanışı en sonda
String monsterName;  monster adını oluşturalım
int num = generator.nextInt(5);
switch (num) {
case 0: monsterName = "Black Daemon"; break;
case 1: monsterName = "The Rabbit"; break;
case 2: monsterName = "Silver Dragon"; break;
case 3: monsterName = "Mountain Troll"; break;
case 4: monsterName = "Alien"; break;
default: monsterName = "N/A"; break;
}

sout("Attack Points of "+monsterName+": ");
int monsterAttack = generator.nextInt(8)+1; 
sout(monsterAttack);

sout("Defense Points of "+monsterName+": ");
int monsterDefense = generator.nextInt(10)+3;  bunu da 10 yaptık
sout(monsterDefense);

sout("Damage of "+monsterName+": ");
int monsterDamage = generator.nextInt(3)+1;
sout(monsterDamage);

sout("Life Points of "+monsterName+": ");
int monsterLife = generator.nextInt(20)+15;
sout(monsterLife);




//sc.nextLine();
boolean runaway = false;



do {
boolean attacker = generator.nextBoolean();

if(attacker) {
sout("You attack");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = yourAttack+dice;
sout("Rolled Values: "+dice);
sout("Your attack Value: "+attackValue);
if (attackValue>monsterDefense){
sout("Your attack was successful.");
monsterLife = monsterLife - yourDamage;
sout(monsterName +"'s remaining Life Points: "+monsterLife);
} else {
sout("Your attack was not successful.");
}
} else {
sout(monsterName +" attacks.");
int dice = generator.nextInt(6)+1 + generator.nextInt(6)+1;
int attackValue = monsterAttack+dice;
sout("Rolled Values: "+dice);
sout(monsterName +"'s attack Value: "+attackValue);
if (attackValue>yourDefense){
sout(monsterName+"'s attack was successful.");
yourLife = yourLife - monsterDamage;
sout("Your remaining Life Points: "+yourLife);
} else {
sout(monsterName+"'s attack was not successful.");
}
sout("Press Enter to continue. (Or type in 'run' to run away)");
command variablea saklayalım
String command = sc.nextLine();
switch (command) {
case "run":
sout("You ran away. You coward! -4 Life Points!");
yourLife-=4;
runaway=true;
break;
default:

}
} while (yourLife>0 && monsterLife >0 && !runaway);
if (yourLife<=0) {
sout("You are dead. RIP. :-(");
break;
}
if (monsterLife<=0) {
sout("You won. The "monsterName+" is dead.")
}
}  for burada bitti
}
}

şimdi do-while 1 tane monster ile savaşmak içindi
Şimdi isimlendirme 3 defa tekrar etmeli
monster puanlaması 3 defa tekrar etmeli 
ama bizim puanlarımız tekrar etmemeli.


şimdi çalıştıralım

break and continue:
for (int i = 0;i<3;i++){
statement1;
if(condition)
continue;
statement2;  continue şart sağlanırsa bu s2 ve s3leri çalıştırmaz
statement3;
}

while (condition1){
statement1;
if(condition2)
continue;
statement2;  continue şart sağlanırsa bu s2 ve s3leri çalıştırmaz
statement3;
increment;
}

Multiplication table exercise:
Yeni class oluşturalım Multiplication diyelim adına
public class Multiplication{
psvm{
for (int j=1;j<9;j++){
//sout(j);
//sout("%3d",j);   aralarına 3 boşluk verir
}
sout();
}
}
şimdi ikinci loopu ekleyelim

public class Multiplication{
psvm{
for (int i=1;i<9;i++) {

for (int j=1;j<9;j++){
//sout(j);
sout("%3d",i*j);  // aralarına 3 boşluk verir i*j dedik çarpım tablosu oluştu
}
sout();
}  i li for loopu kapattık
}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/hibernate-with-java/learn/lecture/10564714?start=0#overview
2 saat
hibernate anlatıyor objectrelational mapping tool for java
ORM object oriented programlama dillerinde uyumsuz sistemlerde 
datayı çevirmek için kullanılan programlama tekniğidir
java object <> hibernate <> DB
hibernate db bağımsızdır
sql ile arası iyidir
jdbc ilişkili kodlamayı minimize eder

public class users {
int userId;
String username;
String password;
String firstName;
String lastName;
}

bunu hibernate alır ve dbte tablo oluşturur
lokale mysql kurulumunu güzel anlatıyor 
mysql workbench kuruldu ayrıca
şema oluşturuyoruz project adlı 
sonra create table diyoruz users diyoruz adına

Eclipse üzerinden çalışıyoruz
hibernate.org
Hibernate ORM 5.8 indirdim
eğitimdeki 5.2.8 end of life
mysql connector for java indirelim
https://dev.mysql.com/downloads/connector/j/
platform independent seçiyoruz
8.0.30 4.9 M olanı indirdik
hibernate-search-5.8.0.Final-dist.zip
mysql-connector-java-8.0.30.zip

hibernates zip açınca lib içinde required klasöründeki
dosyaları kopyalarız ve Eclipse proje altında oluşturduğumuz
lib dosyası içine yapıştırırız 

sonra mysql connector java açarız içindeki
mysql-connector-java-5.0.8-bin.jar dosyasını kopyalarız
sonra yine eclipseteki lib klasörünün içine yapıştırırız

Projeye geliriz sağ tıklayıp Build Path --> Configure Build Path deriz
Libraries gelip Add JARS deriz
az önce yapıştırdığımız lib altındaki dosyaları gösteririz

https://studyeasy.org/
https://studyeasy.org/category/hibernate/
https://studyeasy.org/hibernate/hibernate-configuration-xml/

<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
 
<hibernate-configuration>
    <session-factory>
 
        <!-- Connection settings -->
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
              <!-- Sample MySQL URL provided  -->  
        <property name="connection.url">jdbc:mysql://localhost:3306/test</property>
        <property name="connection.username">root</property>
        <property name="connection.password">root</property>
           
        <!-- Show SQL on console -->
        <property name="show_sql">true</property>
 
		<!--Setting Session context model -->
		<property name="current_session_context_class">thread</property>
 
    </session-factory>
</hibernate-configuration>

Şimdi src foldera gelip Yeni dosya diyoruz Other diyoruz
XML file diyoruz adına hibernate.cfg.xml diyoruz
içine bu üstteki kodu yapıştırıyoruz

<session-factory> üzerine konuşacağız
session object oluşturur ve başlangıçta oluşturulur ve sonra kullanılır
session db ile connection sağlar kısa ömürlü ve güvenliği azdır

Adding Entity Class 
src altına yeni paket oluşturduk org.studyeasy.hibernate.entity dedik adına
bunun altına yeni class ekleyelim
Class ismi ile table adı aynı olsun buna dikkat edelim

@Entity(name="users")
@Table(name="users")
public class Users {
@Id
@Column(name="user_id")
int userId;

@Column(name="username")
String username;

@Column(name="password")
String password;

@Column(name="first_name")
String firstName;

@Column(name="last_name")
String lastName;
}


public Users(String username, String password, String firstName, String lastName){
super();
this.username=username;
this.password=password;
this.firstName=firstName;
this.lastName=lastName;
}

Şimdi getter and setter ekliyoruz
public int getUserId(){
return userId;
}

public void setUserId(int userId) {
this.userId=userId;
}

public String getUsername(){
return username;
}

public void setUsername(String username) {
this.username=username;
}

public String getPassword(){
return password;
}

public void setPassword(String password) {
this.password=password;
}


public String getFirstname(){
return firstname;
}

public void setFirstname(String firstname) {
this.firstname=firstname;
}

public String getLastname(){
return lastname;
}

public void setLastname(String lastname) {
this.lastname=lastname;
}


Generate Constructor using Fields dedik
userID harici seçtik bunu Column altına attık

Hibernate In Action:
Şimdi hibernate paketi altında yeni class ekleyelim
App diyelim
public class App {
psvm{
SessionFactory factory = new Configuration()
			     .configure("hibernate.cfg.xml")
			     .addAnnotatedClass(Users.class)
			     .buildSessionFactory();
Session session = factory.getCurrentSession();
try{
//Create object of entity class type
Users user = new Users("username","password","firstName","lastName");
//start transaction
session.beginTransaction();
//perform operation
session.save(user);
//commit the transaction
session.getTransation().commit();
sout("Row added");

} finally {
session.close();
factory.close();
}  }  }

CRUD İşlemleri Retrieving Record
Şimdi Users.java @Override ekleyelim
@Override
public String toString() {
return "Users [userId=" + userId + ", username=" +username+ ",
password="+password+ firstName +",lastName="+lastName+"]";
}

Şimdi yine Generate Constructor using Fields diyelim
public Users(){
}

şimdi try içini değiştirelim

try{
//Create object of entity class type
Users user = new Users();
//start transaction
session.beginTransaction();
//perform operation
user = session.get(Users.class,8);   8 user_id li kaydı getir diyoruz
//commit the transaction
session.getTransation().commit();
sout(user);

Bu haliyle çalıştırdık

CRUD Update REcord:

try{
//Create object of entity class type
Users user = new Users();
//start transaction
session.beginTransaction();
//perform operation
user = session.get(Users.class,8);   8 user_id li kaydı update edeceğiz
//updating object
user.setUsername("admin@studyeasy.org");
//commit the transaction
session.getTransation().commit();
sout(user);

CRUD Delete REcord:

try{
//Create object of entity class type
Users user = new Users();
//start transaction
session.beginTransaction();
//perform operation
user = session.get(Users.class,8);   8 user_id li kaydı delete edeceğiz
//Delete record with user id 8
user.delete(user);
//commit the transaction
session.getTransation().commit();
sout(user);

Section30-Project-files+(1).zip indirildi

Hibernate Query Language Basics: HQL
Listing records

try{
//start transaction
session.beginTransaction();

List<Users> users = session.createQuery("from users").getResultList();

for(Users temp:users) {
sout(temp);
}

//commit the transaction
//session.getTransation().commit();  bu optional olduğu için kapattıt
çalışması için Entity(name="users") dedik

HQL Where clause:
firstname Salim olanı alalım
try{
//start transaction
session.beginTransaction();

List<Users> users = session.createQuery("from users where firstName ='salim'"
+ "OR last_name='payne'")
	.getResultList();
//first_name dersek salim olarak döner firstName dersek Salim olarak döner
for(Users temp:users) {
sout(temp);
}

//commit the transaction
//session.getTransation().commit();  bu optional olduğu için kapattıt
çalışması için Entity(name="users") dedik

LIKE kullanmak istersek 

try{
//start transaction
session.beginTransaction();

List<Users> users = session.createQuery("from users where firstName ='salim'"
+ "OR last_name like '%a%n%'")
	.getResultList();
//first_name dersek salim olarak döner firstName dersek Salim olarak döner
for(Users temp:users) {
sout(temp);
}

Update Records with HQL:

try{
session.beginTransaction();
session.createQuery("update users set password = 'passwordVidya' "
+ "where first_name='vidya'")
.executeUpdate();
	session.getTransaction().commit();
}


Delete Record Using HQL:

try{
session.beginTransaction();
session.createQuery("delete from users where user_id =5")
.executeUpdate();
	session.getTransaction().commit();
}


----------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/beginner-coding-projects-in-python-javascript-java/learn/lecture/19970148?start=0#overview
2 saat

python javascript java kod anlatımı var
atom kurulum yapıldı
virtual env kurmak istersek
sudo pip install virtualenv 
pip install virtualenv
ad vermek için virualenv NameofVirtualEnv
virtualenv myenv
Bunu project adını verdiğimiz klasör altında oluşturdu.
myenv /bin/activate
myenv\scripts\activate kodları ile activate ediyoruz envleri

Convert Text to Speech with Python
google Text to Speech API gTTS 
pip install gTTS diyelim

Şimdi kodları yazalım
texttospeech.py adlı dosya oluşturduk

from gtts import gTTS
import os

myText = "Don't judge each day by the harvest you reap, but by the seeds that you plant."

language='en'

output = gTTS(text=myText,lang=language,slow=False)

output.save("output.mp3")

os.system("start output.mp3")

şimdi çalıştıralım
txttospeech.py

JavaScript Project
sublimetext kullanıyor

MyCalculator klasörü oluşturduk
index.html ve mystyle.css dosyaları var

index.html oluşturmaya başlayalım

<!DOCTYPE html>
<html>
	<head>
	<meta charset="utf-8">
	<meta name="description" content="Javascript calculator"/>	
	<meta name="viewport" content="width=device-width,
	initial-scale=1">
	<link rel="stylesheet" type="text/css" href="mystyle.css">	

	<title>Calculator</title>
		
	</head>

	<body >
	<h1>Basic Calculator </h1>
	<br/>
	<form id="myform" Name="calc">
	<input name="display"> style="width:675px;height:100px;text-align;
	center;background-color:#1f80c9;"> <br/>
	<input type=button value="0" OnClick="calc.display.value+='0'">
	<input type=button value="1" OnClick="calc.display.value+='1'">
	<input type=button value="2" OnClick="calc.display.value+='2'">
	<input type=button value="+" OnClick="calc.display.value+='+'"
	style="background-color:#cc5c11;"> <br/>
	<input type=button value="3" OnClick="calc.display.value+='3'">
	<input type=button value="4" OnClick="calc.display.value+='4'">
	<input type=button value="5" OnClick="calc.display.value+='5'">
	<input type=button value="-" OnClick="calc.display.value+='-'" style="background-color:#ba55d3;"> <br/>
	<input type=button value="6" OnClick="calc.display.value+='6'">
	<input type=button value="7" OnClick="calc.display.value+='7'">
	<input type=button value="8" OnClick="calc.display.value+='8'">
	<input type=button value="x" OnClick="calc.display.value+='*'" style="background-color:#7db1b2;"> <br/>
	<input type=button value="9" OnClick="calc.display.value+='9'">
	<input type=button value="C" OnClick="calc.display.value=''" style="background-color:#cc0000;">
	<input type=button value="=" OnClick="calc.display.value=eval(calc.display.value)">
	<input type=button value="&#247;" OnClick="calc.display.value+='/'" 
	style="background-color:green;">
	</form>

	</body>
</html>

Apply CSS:
şimdi mystyle.css dosyasını oluşturalım
input {
width:150px;
height:100px;
font-size:75px;
border-radius:10px;
margin:10px;
background-color:#000;
color:#fff;
border-style:none;
}

#myform {

margin-left:225px;
margin-top:20px;
}

h1{
text-align:center;
font-size:80px;
margin-right:150px;
margin-top:20px;
}

Add functionality with Javascript
display property, onclick event ve eval() function,
Assignment operator += kullanacağız
x+=y x=x+y

Şimdi Java tarafına geçelim
Netbeans ile ilerliyoruz
TempConverter adında project oluşturduk

public class Tconverter extends javax.swing.JFrame {
public Tconverter(){
initComponents();
}
}


Ekranlardaki JFrame üezrinden ilerliyoruz
title verdik My Temperature Converter
textfield tempTextField, label1 Celsius , 
button Convert,    label2 Fahrenheit, 
ekledik
Convert üstüne geldik events -->  action --> actionPerformed dedik 
private void ConvertActionPerformed() {
int tempFahr=(int) ((Double.parseDouble(tempTextField.getText()))
*1.8+32);
Fahrenheit.setText(tempFahr+" Fahrenheit");
}  bunun içine yazalım mantığımızı

12 C için 53 dedi
build dedikten sonra cmdden
java -jar "c:users\..\TempConverter.jar" deyip çalıştırdık
20 C için 68 geldi

----------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.udemy.com/course/introduction-to-programming-with-java/learn/lecture/8086886?start=0#overview
2 saat

Scanner input = new Scanner(System.in);
radius= input.nextDouble();

int firstVariable=  input.nextInt();
int secondVariable= input.nextInt();
int thirdVariable=  input.nextInt();

int averageVariable= (firstVariable+secondVariable+thirdVariable)/3

primitive data types:
LISTING+4.pdf indirildi

public class FahrenheitToCelsius{
psvm{
Scanner input = new Scanner(System.in);
double fahrenheit =input.nextDouble();
//celsius = (5.0/9)*(fahrenheit-32);
double celsius = (5.0/9)*(fahrenheit-32);
sout(celsius);
} }

public class PoundsIntoKilograms {
java.util.Scanner input = new java.util.Scanner(System.in);
double pounds = input.nextDouble();
double kilograms = (pounds*0.454);
System.out.println("Your pounds :"+pounds+" = "+kilograms);
}


area = radius * radius * π
volume = area * length

π = 3,1416

Here is a sample run:

Enter the radius of a cylinder: 8
Enter the length of a cylinder: 12
The area is 201.06192982976
The volume is 2412.7431579571203

-----------------------------

public class VolumeOfCylinder {
java.util.Scanner input = new java.util.Scanner(System.in);
double radius = input.nextDouble();
double length = input.nextDouble();
//π = 3,1416
//area = radius * radius * π
//volume = area * length
double pi = 3.1416
double area = (radius * radius * pi);
double volume = (area * length);
System.out.println("Enter the radius of a cylinder :"+radius);
System.out.println("Enter the length of a cylinder :"+length);
System.out.println("The area is "+area);
System.out.println("The volume is "+volume);

-----------------------------

Scanner input = new Scanner(System.in);
sout("Please enter a + or -");
String sign = input.nextLine();
int firstValue = input.nextInt();
int secondValue = input.nextInt();
if(sign.equals("+")){
sout( firstValue + secondValue);
}else if (sign.equals("-")) {
sout( firstValue - secondValue);
} else {
sout("Incorrect sign")
}

----------------------------------
switch {

int month = input.nextInt();
String monthString;

switch(month) {
case 1:
monthString ="January";
break;

case 2:
monthString ="February";
break;

case 3:
monthString ="March";
break;

case 4:
monthString ="April";
break;

case 5:
monthString ="May";
break;

case 6:
monthString ="June";
break;
case 7:
monthString ="July";
break;

case 8:
monthString ="August";
break;

case 9:
monthString ="September";
break;
case 10:
monthString ="October";
break;

case 11:
monthString ="November";
break;

case 12:
monthString ="December";
break;

default:
monthString ="Invalid data, expected data is between "1-12";
break;
}
sout(monthString);

-----------------------------------

Methodlar:
public class MaxValues{
psvm{
int firstValue=5;
int secondValue=8;
int result = maxValue(firstValue,secondValue);
sout("The max value: "+result);
}
public static int maxValue(int firstParam, int secondParam){
int result
if(firstParam>secondParam){
result = firstParam;
} else {
result = secondParam;
} 
return result;
 } }

Bunu void olarak çevirip returnleri kaldırabiliriz

public class MaxValues{
psvm{
int firstValue=5;
int secondValue=8;
maxValue(firstValue,secondValue);

}
public static void maxValue(int firstParam, int secondParam){
int result
if(firstParam>secondParam){
result = firstParam;
} else {
result = secondParam;
} 
sout("The max value: "+result);
 } }

bu halde de çalışıyor

-----------------------
Şimdi override işlemine bakalım

public class MaxValues{
psvm{
int firstValue=5;
int secondValue=8;
int result = maxValue(firstValue,secondValue);

double firstValueDouble=66.6;
double secondValueDouble = 44.4;

double resultDouble = maxValue(firstValueDouble,secondValueDouble);
sout("The max in double is :"+resultDouble);

}

public static int maxValue(int firstParam, int secondParam){
int result
if(firstParam>secondParam){
result = firstParam;
} else {
result = secondParam;
} 
return result;
 } 

public static double maxValue(double firstParam, double secondParam){
double result
if(firstParam>secondParam){
result = firstParam;
} else {
result = secondParam;
} 
return result;
 }
}

---------------------------------
Arrayler
public class BasicArrays{
psvm {
//elementType arrayRefVar[] = new elementType[arraySize];

//double[] myList = new double[10];
double[] myList = {1.8, 2.9, 3.4, 4.6, 2.1};

//alttaki metodu çağıralım şimdi
printArraysValues(myList);
//ikinci metodu da çağıralım
symArrayValues(myList);
//üçüncü metodu çağıralım
maxInArray(myList);
}

private static void printArraysValues(double[] myList) {
for (int i=0;i<myList.length;i++) {
sout(myList[i]);
}
}

private static void symArrayValues(double[] myList ) {
double sum = 0;
for (int i=0;i<myList.length;i++) {
sum+=myList[i];
}
sout(sum);
}

//şimdi en büyük değeri alan metodu yazalım
private static void maxInArray(double[] myList) {
double temp=0;
for(double value:myList){
if(value>temp) {
temp=value;
}
}
sout("max value"+ temp );
} }

-----------------------------
Multidimensional Arrays:

public class BasicArrays{
psvm {
//elementType arrayRefVar[] = new elementType[arraySize];

//double[] myList = new double[10];
double[] myList = {1.8, 2.9, 3.4, 4.6, 2.1};


maxInArray(myList);

//elementType[][] arrayRefVar;
//double [][] myMultiList = new double[5][5];
double [][] myMultiList ={
{1,2.3,3.5},
{4.4,5,6},
{7,8.2,9},
{10.10,11,12}
};

printArraysValues(myMultiList);
symArrayValues(myMultiList);

}

private static void printArraysValues(double[][] myList) {
//çok boyutlu olduğu için ikinci bir nested loopa ihtiyaç var
for (int i=0;i<myList.length;i++) {
	for(int j=0;j<myList[i].length,j++)
	sout(myList[i][j]);
}
}


private static void symArrayValues(double[][] myList ) {
//yine j için nested loop ekleriz
double sum = 0;
for (int i=0;i<myList.length;i++) {
	for(int j=0;j<myList[i].length,j++){
		sum+=myList[i][j];
}
}
sout(sum);
}
}

-------------------------------
Objects:
public class Circle {

public double radius;

public Circle(){
radius=2  // değer verilmezse 2 alacak
}

public Circle(double radius){
this.radius=radius;
}

//içinde double radius vardı parametre sormasın diye sildik
public double getArea(){
double area = radius * radius - Math.PI;
return area;
}
}

Yeni class oluşturalım

public class TestCircle {
psvm{
Circle circle1 = new Circle();

sout("The radius is:"+circle1.radius + "the area is: "+circle1.getArea());

Circle circle1 = new Circle(5);

sout("The radius is:"+circle2.radius + "the area is: "+circle2.getArea());

}}

Şimdi aynı paketin kopyasını alıp revize edelim

public class Rick {

public Boolean isDrinking;
public Boolean isNeggingJery;
public Boolean isOnAdventure;

public Rick(){
isDrinking=true;
isNeggingJery=true;
isOnAdventure=false;
}

public Rick(Boolean isDrinking, Boolean isNeggingJery,Boolean isOnAdventure ){
this.isDrinking=isDrinking;
this.isNeggingJery=isNeggingJery;
this.isOnAdventure=isOnAdventure;
}
//getter setter ekleyelim


public Boolean getIsDrinking(){
return isDrinking;
}

public void setIsDrinking(Boolean isDrinking){
this.isDrinking=isDrinking;
}

public Boolean getIsNeggingJery(){
return isNeggingJery;
}

public void setIsNeggingJery(Boolean isNeggingJery){
this.isNeggingJery=isNeggingJery;
}


public Boolean getIsOnAdventure(){
return isOnAdventure;
}

public void setIsOnAdventure(Boolean isOnAdventure){
this.isOnAdventure=isOnAdventure;
}

@Override
public String toString(){
return "Rick [isDrinking=" + isDrinking + ", isNeggingJery=" + isNeggingJery + ", isOnAdventure=" + isOnAdventure + "]";
}

}

Yeni class oluşturalım

public class TestRick {
psvm{
Rick rick1 = new Rick();
sout("rick1:"+ rick1.toString());

Rick rick2 = new Rick(true,true,true);
sout("rick2:"+ rick2.toString());
}}


-----------------------------------------
TExt Input and Output:
public class ReadFromFile {
psvm {
File file = new File("c:\\user\output.txt");
Scanner input = new Scanner(file);

while(input.hasNext()){
String temp = input.next();

sout(temp);

}

input.close();

}
}


yeni class oluşturalım
public class WriteIntoFile {
psvm{
File file = new File ("c:\\user\output.txt");
if(file.exists()) {
System.exit(0);
}

PrintWriter output = new PrintWriter(file);

output.print("Winter is coming");
output.print("John snow is king");
output.print("John snow slept");
output.print("John snow woke up");

output.close();

}
} bunun  çıktısında txt dosyasına bu değerleri yazdırdık

----------------------------------
Inheritance:
public class Animals {
private String walk;
private String eat;
private String cuddle;
//getting constructor using Fields ile oluşturalım
public Animals(){
}

public Animals(String walk, String eat, String cuddle){
super();
this.walk=walk;
this.eat=eat;
this.cuddle=cuddle;

}

getter setter dedik

}

yeni bir class oluşturduk
public class Dog extends Animals{
private String barking;

public Dogs(){
super();
}

public Dogs(String barking){
this.barking=barking;

}


//generate constructor deyip alttakini oluşturduk ve barking ekledik
public Dogs(String barking,String walk,String eat, String cuddle){
super(walk,eat,cuddle);
setWalk(walk);
setEat(eat);
setCuddle(cuddle);
}

//barking ile getter setter oluşturalım
public String getBarking(){
return barking;
}

public void setBarking(String barking){
this.barking=barking;
}

//generate toString yapalım
@Override
public String toString(){
return "Dogs [barking=" +barking + ",getWalk()="+getWalk()+ ", getEat()="+getEat() +", getCuddle()="+getCuddle()+"]"; 
}

//şimdi cats diye class oluşturalım
public class Cats extends Animals{
private String mial;

public Cats(){
super();
}

public Cats(String barking){
this.mial=mial;

}
public Cats(String barking,String walk,String eat, String cuddle){
super(walk,eat,cuddle);
setWalk(walk);
setEat(eat);
setCuddle(cuddle);
}


//getter setter ekleyelim
public String getMial(){
return mial;
}

public void setMial(String mial){
this.mial=mial;
}

//generate toString yapalım
@Override
public String toString(){
return "Cats [mial=" +mial + ",getWalk()="+getWalk()+ ", getEat()="+getEat() +", getCuddle()="+getCuddle()+"]"; 
}

}


Şimdi yeni bir TestAnimal class oluşturalım

public class TestAnimals{
psvm{
Dogs germanShepart= new Dogs();
germanShepart.setBarking("Barking");
germanShepart.setCuddle("Cudling");
germanShepart.setEat("Give me Food");
germanShepart.setWalk("Running");

sout(germanShepart.toString());


Dogs smallDog = new Dogs();
smallDog.setBarking("Too small to bark");

sout(smallDog.toString());

//şimdi kedi örneği yapalım
Cats littleKitty = new Cats();
littleKitty.setMial("Miaaal");

sout(littleKitty.toString());

} }

-------------------------
Polimorphism:

TestAnimals classında littleKitty.setMial("Miaaal"); 
kodu } kapanışından sonra ekleyelim
displayAnimals(littleKitty);
displayAnimals(smallDog);

Dogs doggoArjantino = new Dogs();
doggoArjantino.setBarking("Big bark");
doggoArjantino.setEat("Give me a lot of food");
displayAnimals(doggoArjantino);


private static void displayAnimals(Animals animalObs){
sout(animalObj.toString());

}

---------------------------
Abstract Class:

Animals class içinde önce başta public class Animals içine
abstract ekledi public abstract class Animals oldu

sonra en sona
public abstract String animalsDescription(); ekledik

Cat class içine gelip unimplemented method ekletti

@Override 
public String animalsDescription(){
return "Find boxes to fit in";
}

yazdık en sona
sonra toString deyip animalDescription() seçtik
@Override 
public String toString(){
return "Cats [mial="+ mial + ", animalsDescription()=" + animalDescription() +"]";
}

Dogsa gelip unimplemented dedik yine class üstüne gelip
sonra en altta alttaki kod gelid
@Override 
public String animalsDescription(){
return "Protect the house";
}

@Override 
public String toString(){
return "Dogs [barking="+ barking + ", animalsDescription()=" + animalDescription() +"]";
}

--------------------
Interface:
public class TestJuicy{
psvm{
Object[] objectFruits = {new Apples(), new Bananas()}

for(int i=0; i<objectFruits.length;i++){
if(objectFruits[i]=instanceof Juicy) {
sout((((Juicy)objectsFruits[i]).makeFresh()));

}}}}

Şimdi Interface oluşturalım

public interface Juicy{
public abstract String makeFresh();

}

Şimdi Oranges adlı class oluşturalım

public class Oranges implements Juicy {
@Override 
public String makeFresh() {
return "Oranges are good for fress";
}
}

Aynı classı kopyalayıp Lemon, Grapefruit, Apple dedik

public class Apples{
String description = "Apples are healthy";

@Override
public String toString(){
return "Apples [description="+ description + "]";
}

}

Apple kopyalayıp Bananas oluşturduk

Şimdi TestJuicy classı oluşturalım
bu en üstteki classtır
çalıştırınca her classta yazan değeri bastı.

------------------------
Exceptions:

public class ReadFromFileWithFinally {
psvm {
PrintWriter output = null;

try {
output = new PrintWriter("C:\users\output.txt");
output.println("Winter is coming");
} catch(IOException ex){
sout(ex);
} finally{
if(output!=null){
output.close();
}

}
sout("Finish");

}
}

-----------------------
Exception part2 
public class ArithmeticDivision {
psvm{
Scanner input = new Scanner(System.in);

sout("Enter 2 integer");

int firstNumber =input.nextInt();
int SecondNumber = input.nextInt();

try {
int result=resultInteger(firstNumber, secondNumber);
sout("first / second= "+result);
} catch(ArithmeticException ex) {
sout(ex);
}

}
public static int resultInteger(int firstNumber, int secondNumber){
if(secondNumber==0) {
throw new ArithmeticException("The second can not be zero: ");
}
return firstNumber/secondNumber;
}
}


-----------------------
Exception part3
public class ReadFromFileWithFinally {
psvm {
PrinterWriter output = null;

try {
output = new PrintWriter("c:\users\output.txt")
output.println("Winter is coming");
}catch(IOException ){
sout(ex);
}finally{
if(output!=null){
output.close();
}
}
sout("Finish");
}
}

eğitim kodları buradan alınabilir
https://github.com/kanastasov/Introduction-to-programming-with-Java---Free-course


----------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.udemy.com/course/java-tutorial-for-beginners-m/learn/lecture/19596642?start=0#overview
2 saat
eclipse ile çalışıyor
proje oluşturduk sonra package oluşturduk
class ile başladık
float a = 12.74f;
boolean logit = true;
---------------------
boolean a=true;
boolean b=false;
sout(a&b);  false üretir  and
sout(a | b); true üretir
----------------------
int number=-13;
if(number>0){
sout("Positive");
} else if (number<0){
sout("Negative");
} else {
sout("Zero");
}
-----------------
int x=1;
while (x<=4)
{
sout(x);
x++;
}


for(int i=0;i<5;i++){
sout(i);
}

for(int i=0;i<=10;i=i+2){
sout(i);
}


int n=5;
for (int i=0;i<n;i++)
{
for(int j=0;j<=i;j++){
sout("*");
}
sout();
}
--------------------
Fonksiyonlar:

public static void sparta() {   
sout("this is sparta");
}
void verdik birşey döndürmez çağrıldığında döndürecek
üstte main içinde sparta(); denince this is sparta döner

public static void add(int num1,int num2) {
sout(num1+num2);
}
main içinde add(); çağrıldığında değer döndürür
int a=10;
int b=20;
add(a,b);  30 döner
------------------------
Değer döndüren fonksiyonlar
main içinde
TestProject obj = new TestProject();
int x=10;
int y=20;
int get_result=obj.add(x,y);
sout(get_result);

main } kapanışı sonrası
public int add(int num1, int num2){
int result = num1+num2;
return result;
}
-------------------------
swapping values
public static void swapFunction(int a,int b){
sout("Before swapping , a= "+a+" b = "+b);
int c =a;
a=b;
b=c;
sout("After swapping , a= "+a+" b = "+b)
}

sonra main içinde 
int x=10;
int y=20;
swapFunction(x,y); olarak çalıştırırız
--------------------------
Method Overloading: aynı isimli fonksiyon farklı parametre farklı return types
public static int area(int n1,int n2){
int result = n1*n2;
return result;
}

public static float area(int n){
float result = 3.14f*n*n;
return result;
}

şimdi main içinde çalıştıralım

int x=10;
int y=20;
int r=5;

TestProject obj = new TestObject();
float area_circle=obj.area(r);

int area_rectangle=obj.area(x,y);
sout(area_circle);

sout(area_rectangle);

------------------------
Arrays:
Arrayler aynı data tipinde çoklu eleman saklamamızı sağlar 
char[] a =new char[5];
a[0]='a';
a[1]='b';
a[2]='c';
a[3]='d';
a[4]='e';

for (int i=0;i<5;i++){
sout(a[i]);
}

---------------------
int[] a = new int[10];
for(int i=0;i<5;i++){
a[i]=i;
}

for(int i=0;i<5;i++){
sout(a[i]);
}

----------------------
int a[]=new int[5];
int b[]=new int[5];
int c[]=new int[5];

int num=5;

for(int i=0;i<5;i++){
a[i]=i;
}

for(int i=0;i<5;i++){
b[i]=num;
num++;
}

sout(Values of Array A);
for(int i=0;i<5;i++){
sout(a[i]+" ");
}

sout(Values of Array B);
for(int i=0;i<5;i++){
sout(b[i]+" ");
}

for(int i=0;i<5;i++){
c[i]=a[i]+b[i];
}
sout(Value of Array C);
for(int i=0;i<5;i++){
sout(c[i]+" ");
}

------------------------
Multidimensional Array:
int[][] a =new int[3][3];
int num=1;

for(int i=0;i<3;i++){
	for(int j=0;j<3;j++){
	a[i][j]=num;
	++num;
} }
--------------------------
for(int i=0;i<3;i++){
	for(int j=0;j<3;j++){
	sout(a[i][j]+" ");
} 
sout(" ");
}





----------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.udemy.com/course/learn-beginners-java/learn/lecture/18533554?start=0#overview
2 saat 
eclipse ile çalışıyor

Scanner input = new Scanner(System.in);

int number1 = input.nextInt();
double number2doub = input.nextDouble();
int number3Int = input.nextInt();
sout("USer input %d%n,%f%n",number1,number2Doub);
%d integer için %f double için
%n alt satıra atar

if(number1==number3Int) {
sout("%d ==%d%n number1 is equal to number3",number1,number3Int);
//printf kullandık üstte de burada da
}
---------------------
Class, object , methods , strings:

public class Account {
private String name;

public Account(String name) {
this.name=name;
}

public void setName(String name){
this.name=name;
}

public String getName(){
return name;
}

}

---------------------
Instance Get and Set:

az önceki Account class dursun
public class AccountTest {
psvm{
Scanner input = new Scanner(System.in);
Account myAccount = new Account();
sout("Initial name is %s%n%n ",myAccount.getName());
sout("Please enter name");
String theName = input.nextLine();
myAccount.setName(theName);
sout();

sout("Name in the object myAccount is: %s%n", myAccount.getName());
}

}

-----------------
Constructors:

public class AccountTest {
psvm{

Account account1 = new Account("Jane Green");
Account account2 = new Account("John Blue");

sout("Account1 is %s%n%n ",account1.getName());
sout("Account2 is %s%n%n ",account2.getName());

}

}


--------------
Account class üzerinde devam edelim

public class Account {
private String name;
private double balance;

public Account(String name, double balance) {
this.name=name;

if(balance>0.0){
this.balance=balance;
}
}

public void deposit(double depositAmount){
if(depositAmount >0.0){
balance=balance+depositAmount;
}
}

public double getBalance(){
return balance;
}

public void setName(String name){
this.name=name;
}

public String getName(){
return name;
}

}

Şimdi o halde yeni parametreleri eklemek lazım
public class AccountTest {
psvm{

Account account1 = new Account("Jane Green",,50.00);
Account account2 = new Account("John Blue",-7.33);

sout("Account1 is belonged to %s €%.2f%n%n ",account1.getName(),account1.getBalance());
sout("Account2 is belonged to %s €%.2f%n%n ",account2.getName(),account2.getBalance());

Scanner input = new Scanner(System.in);
sout("Enter deposit amount for account1: ");
double depositAmount = input.nextDouble();
sout("%.2f to account1 balance", depositAmount);
account1.deposit(depositAmount);
}
}

--------------

While statements:

public class ClassAverage{
psvm{
Scanner input = new Scanner(System.in);
int total=0;
int gradeCounter=1;

while(gradeCounter<=10){
sout("Enter grade:");
int grade = input.nextInt();
total=total+grade;
gradeCounter = gradeCounter+1;
}
int avearage = total/10;
sout("%n Total of all 10 grades is %d %n",total);
sout("%n Class average is %d %n",average);
}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.udemy.com/course/programming-network-applications-in-java/learn/lecture/13927538?start=0#overview
2 saat

eclipse kullanıyor
network app oluşturacağız

Simple TCP Program (Server):
Server.java.zip dosyası indirildi
import java.net.ServerSocket;
import java.net.Socket;
import java.io.BufferedReader;

public class Server {
public Server() throws Exception {
ServerSocket server_socket = new ServerSocket(2020); //opening a new port
sout("Port 2020 is open");

Socket socket = server_socket.accept();
sout("Client "+socket.getInetAddress()+ " has connected.");

//IO Buffers:
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);  //flush kısmı için true diyoruz
//çünkü mesajımız çok kısa thanks sadece
out_socket.println("Welcome");  //Send Welcome to  the Client
String message = in_socket.readLine();  //receive thanks kısmı
sout("Client says: "+message);  //display Clients message in the console

socket.close();
sout("Socket is closed");
}



psvm{
try {
new Server();
} catch(Exception e) {
e.printStackTrace();

}

}

}
-------------------------
Simple TCP Program (Client):
Client.java.zip dosyası indirildi
Yeni Class oluşturduk Client isimli
CTRL+SHIFT O dedik alttaki kütüphaneler geldi
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {

public Client() throws Exception {
Socket socket = new Socket("localhost",2020);
sout("Successful connection to the server");

//IO stream
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);

String message = in_socket.readLine();
sout("Server says: "+message);
out_socket.println("Thanks");

socket.close();
sout("Socket closed");
}

psvm{
try {
new Client();
} catch(Exception e) {
e.printStackTrace();

}
}
}

---------------------------
Advanced Simple TSP Program:
simple_tcp_2.zip indirildi
Yeni paket oluşturuyoruz önceki server ve client classlarını
kopyalayalım

Client ile değişikliğe başlayalım

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {

public Client() throws Exception {
Socket socket = new Socket("localhost",2020);
sout("Successful connection to the server");

//IO stream
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);
Scanner keyboard = new Scanner(System.in);


String message = in_socket.readLine();
sout("Server says: "+message);
sout("SAy something to the server: ");
message = keyboard.nextLine();  //user is prompted to type a message for the server
out_socket.println(message);

socket.close();
sout("Socket closed");
}

psvm{
try {
new Client();
} catch(Exception e) {
e.printStackTrace();

}
}
}

--------------tekrar değiştirelim clienti

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {

public Client() throws Exception {
Socket socket = new Socket("localhost",2020);
sout("Successful connection to the server");

//IO stream
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);
Scanner keyboard = new Scanner(System.in);
String message ;
// eski kodlara ihtiyaç olmadığı için sildik
socket.close();
sout("Socket closed");
}

psvm{
try {
new Client();
} catch(Exception e) {
e.printStackTrace();

}
}
}

şimdi server tarafı kodlarına bakalım

Server.java.zip dosyası indirildi
import java.net.ServerSocket;
import java.net.Socket;
import java.io.BufferedReader;

public class Server {
public Server() throws Exception {
ServerSocket server_socket = new ServerSocket(2020); //opening a new port
sout("Port 2020 is open");

Socket socket = server_socket.accept();
sout("Client "+socket.getInetAddress()+ " has connected.");

//IO Buffers:
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);  //flush kısmı için true diyoruz
//random number generate edelim
String message;
int secret_number = (int)(Math.random()*10+1);

do{
out_socket.println("Guess a number [1-10]: ");
message = in_socket.readLine();
} while(!(Integer.parseInt(message)==secret_number));

out_socket.println("You got it!!");
sout("Secret number is out. Exiting the app")

socket.close();
sout("Socket is closed");
}



psvm{
try {
new Server();
} catch(Exception e) {
e.printStackTrace();

}

}

}

Şimdi Clienta gidip değişiklik yapalım yine

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {

public Client() throws Exception {
Socket socket = new Socket("localhost",2020);
sout("Successful connection to the server");

//IO stream
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);
Scanner keyboard = new Scanner(System.in);
String user_number ;

while((in_socket.readLine()).startsWith("Guess")){
sout("Server says: Guess a number [1-10].");
user_number = keyboard.nextLine();
out_socket.println(user_number);
}

sout("You got it!!");

socket.close();
sout("Socket closed");
}

psvm{
try {
new Client();
} catch(Exception e) {
e.printStackTrace();

}
}
}

--------------------------
Wireshark Analysis:
cmd açtık IPv4ü aldık 10.0.2.15
Client kodunda localhost yerine bu ipyi yazdık
Sonra wireshark açtık
Server kodunu çalıştırdık Client kodunu çalıştırdık
Wiresharktan izlemeye başladık artık
Welcome!\n kodu geldi 10byte
Clientin dönüşüne baktık Thanks!\n geldi o da 9byte 
---------------------

Multithreading:
Multi-thread+ppt.pdf ve simple_tcp_multithread.zip indirildi
2 class oluşturduk ServerMain ve ServerThread diye.
Client kodlarını da kopyaladık

Önce ServerMain yazalım

import java.net.ServerSocket;

public class ServerMain{

public ServerMain() throws Exception {
ServerSocket server_socket = new ServerSocket(2020);
sout("Port 2020 is now open");

//infinite while loop wait for new connection
while(true){
Socket socket = server_socket.accept();
ServerThread server_thread = new ServerThread(socket);
Thread thread = new Thread(server_thread);
thread.start();
}

}


psvm{
try{
new ServerMain();
} catch (Exception e){
e.printStackTrace();
}
}
}

şimdi ServerThread classının kodlarını yazalım
public class ServerThread implements Runnable{
private Socket socket;
public ServerThread (Socket socket) {
this.socket= socket;
}

@Override
public void run() {
try{

sout("Client has connected");

//IO buffers:
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);

out_socket.println("Welcome! What's your name?"); //send welcome to client
String message = in_socket.readLine();  //receive thanks
sout("Client says: "+message);

socket.close();
sout("Socket is closed");

} catch (Exception e){
e.printStackTrace();
}

}
}

Şimdi clientı düzenleyelim sayı tahmin etmeyecek çünkü


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {

public Client() throws Exception {
Socket socket = new Socket("localhost",2020);
sout("Successful connection to the server");

//IO stream
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);
Scanner keyboard = new Scanner(System.in);

String message=in_socket.readLine();
sout("Server says: "+message);
message = keyboard.nextLine();
out_socket.println(message);

socket.close();
sout("Socket closed");
}

psvm{
try {
new Client();
} catch(Exception e) {
e.printStackTrace();

}
}
}

Şimdi çalıştıralım
ServerMain -->  Client çalıştırdık
Client2 ve Client3 çalıştırdık
isimler sordu yazdık

------------------------------
Advancing Multithreading TCP Program:

clientı ne kadar çalıştırırsak Client has connected yazıyor
KAç client bağlandı saymak istersek
ServerMaini biraz değiştirelim o zaman

import java.net.ServerSocket;

public class ServerMain{

public ServerMain() throws Exception {

ServerSocket server_socket = new ServerSocket(2020);
sout("Port 2020 is now open");

//infinite while loop wait for new connection
while(true){
Socket socket = server_socket.accept();
ServerThread server_thread = new ServerThread(socket,this); // client saysın diye bunu da ekledik
Thread thread = new Thread(server_thread);
thread.start();
}

}

private int clientnumber=1;

public int getClientNumber(){
return clientnumber++;
}  // her client çağrılışınca 1 artacak


psvm{
try{
new ServerMain();
} catch (Exception e){
e.printStackTrace();
}
}
}

ServerThreadde de şu eklemeyi yapalım

public class ServerThread implements Runnable{
private Socket socket;
private ServerMain server_main;
public ServerThread (Socket socket, ServerMain server_main) {
this.socket= socket;
this.server_main=server_main;
}

@Override
public void run() {
try{

int client_number = server_main.getClientNumber();

sout("Client "+ client_number + ". has connected");

//IO buffers:
BufferedReader in_socket = new BufferedReader(new InputStreamReader(socket.getInputStream()));
PrintWriter out_socket = new PrintWriter(new OutputStreamWriter (socket.getOutputStream()),true);

out_socket.println("Welcome! You are client number "+ client_number + ". What's your name?"); //send welcome to client
String message = in_socket.readLine();  //receive thanks
sout("Client says: "+message);

socket.close();
sout("Client " + client_number + ". has disconnected");

} catch (Exception e){
e.printStackTrace();
}

}
}


çalıştırdığımızda client1 client2 connected der

---------------------
Bonus Example:
Kodları var

Bonus+Examples+-+TCP+Multithread.txt indirildi

bonus_1a.zip, bonus_1b.zip, bonus_2a.zip, bonus_2b.zip indirildi

--------------------

UDP Sockets in Java:
Simple UDP Program (Receiver):


Yeni proje oluşturduk paket oluşturduk
Receiver adlı class oluşturduk

public class Receiver {
public Receiver() throws Exception{
DatagramSocket socket = new DatagramSocket(2020);
sout("Receiver is running");
Scanner keyboard = new Scanner(System.in);

byte[] buffer = new byte[1500];  //MTU = 1500
DatagramPacket packet = new DatagramPacket(buffer,buffer.length);

socket.receive(packet);  //retreiving senders message

String message = new String(buffer).trim();
sout("Received: "+message);

InetAddress senders_address = packet.getAddress();
int senders_port = packet.getPort();

sout("Enter your message");
message = keyboard.nextLine();
buffer = message.getBytes();
packet = new DatagramPacket(buffer,buffer.length,senders_address,senders_port);
socket.send(packet);

sout("Sent: "+message);
}

psvm{
try {
new Receiver();
}catch (Exception e){
e.printStackTrace();
}
}
}


Şimdi de Sender programını yazalım

Simple UDP Program (Sender):


public class Sender{

public Sender() throws Exception {

DatagramSocket socket = new DatagramSocket();
Scanner keyboard = new Scanner(System.in);

sout("Enter your message");
String message = keyboard.nextLine();
byte[] buffer = message.getBytes();

DatagramPacket packet = new DatagramPacket(buffer, buffer.length,InetAddress.getByName("127.0.0.1"),2020);

socket.send(packet);
sout("Sent: "+message);

buffer = new byte[1500];
packet = new DatagramPacket(buffer,buffer.length);
socker.receive(packet);

message = new String(buffer).trim();
sout("Received: "+message);

}

psvm{
try {
new Sender();
}catch (Exception e){
e.printStackTrace();
}
}
}


Bundan sonra  açıklaması var


Receiver değiştirelim

public class Receiver {
public Receiver() throws Exception{
DatagramSocket socket = new DatagramSocket(2020);
sout("Receiver is running");
//Scannerı da siliyoruz
//loop için while ekledik

while(true){

byte[] buffer = new byte[1500];  //MTU = 1500
DatagramPacket packet = new DatagramPacket(buffer,buffer.length);

socket.receive(packet);  //retreiving senders message

String message = new String(buffer).trim();
sout("Received: "+message);

InetAddress senders_address = packet.getAddress();
int senders_port = packet.getPort();

//mesaj almıyoruz sürekli Ok göndereceğiz
message = "Ok."
buffer = message.getBytes();
packet = new DatagramPacket(buffer,buffer.length,senders_address,senders_port);
socket.send(packet);

sout("Sent: "+message);
}  //whileı burada kapatıyoruz
}

psvm{
try {
new Receiver();
}catch (Exception e){
e.printStackTrace();
}
}
}

Şimdi Sendera gidelim

public class Sender{

public Sender() throws Exception {

DatagramSocket socket = new DatagramSocket();
Scanner keyboard = new Scanner(System.in);
// socket açmayı ve Scanner tanımlamayı 1 kez yapmak yeterli olduğu için while dışında bıraktık
//while ekleyelim buraya
while(true) {
sout("Enter your message");
String message = keyboard.nextLine();
byte[] buffer = message.getBytes();

DatagramPacket packet = new DatagramPacket(buffer, buffer.length,InetAddress.getByName("127.0.0.1"),2020);

socket.send(packet);
sout("Sent: "+message);

buffer = new byte[1500];
packet = new DatagramPacket(buffer,buffer.length);
socker.receive(packet);

message = new String(buffer).trim();
sout("Received: "+message);

} //while burada kapattık  içini de CTRL+SHIFT + F ile formatladık
}

psvm{
try {
new Sender();
}catch (Exception e){
e.printStackTrace();
}
}
}

Şimdi Receiver önce sonra sender sonra çalıştırdık
hi yazdık bye yazdık receiver hep Ok yazdı

Simple UDP Chat programı var

----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------
















































































--------------------------------------------------------------------------------------------------------------------------------------------------------

