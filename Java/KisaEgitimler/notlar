https://www.udemy.com/course/an-introduction-to-java-programming/learn/lecture/12336288?start=0#overview
1,5 saat

String name="Oliver"
name. dersek birçok method karşımıza gelir
name.charAt(5) desek r harfini verir Oliverın 5.karakteri. index 0dan başladığı için bu şekilde
String upper = name.toUpperCase();
System.out.println(upper);  ile hepsini büyük harfe çevirir

x=hello y=hello
x.equals(y)  true verir

diğer metodlara bakalım
name.length()
String a="leo\npard" dersek
bunu print edince leo bir üst satırda pard alt satırda olur

iki kere çift tırnak kullanılması gerekirse
String dialogue = "He said,\"hello\""; denilirs

tab atmak için araya \n kullanılır

name.substring(3,9)  3ten başlar 9a kadar gider 9 hariç

Arrayler
int[] numsA = {1,2,3,4,5}; bunu print edersek locationidsini verir
ancak Arrays.toString(numsA) dersek [1,2,3,4,5] olarak dönecektir
int[] numsB = new int[4]; bunu print edersek [4, -123,24,0] verir
int[4] dediğimiz için 4 eleman oluşması gerekir dördüncüyü 0 olarak verdi

int[][] board = new int[2][2]; 
board[0][0]=1;
board[0][1]=0;
board[1][0]=1;
board[1][1]=10
1 0
1 0 olarak görünür


ArrayList<> objesi
List<Integer> list = new ArrayList<Integer>();
list.add(3);
list.add(99);
list.add(-1);
list print dediğimizde [3,99,-1] verir
list.remove(index:2) 2 deyince index kendisi ekler
list.remove(new Integer(value:-1)); dersek -1 olan değeri siler
sadece [3,99] kalır

Indexer x = list.get(1) dersek bunu print edersek 99u verecektir

list.size() dersek 2 verecektir

Döngüler for - while

for (int i=0;      i<5;       i++){
     initial;condition; incrementer
     System.out.println(i);
}


int k=0,sum=0;
while (k<10) {
sum+=k;
k++;
}
System.out.println(sum);

list ve ArrayList import edilmeli yoksa çalışmaz main içine alttaki kodu yazalım
List<Integer> list = new ArrayList<>();
for (int i=0;i<1000;i++){
list.add(i);
}

int sum =0;
for (Integer num : list) {
System.out.println(num);
sum+=num
}
System.out.println(sum);

break ve continueya bakalım
int a=52;
while(true){
if (a%51 == a%13) {
System.out.println(a);
break;
else {
a++;
}  }  }


int a=52;
while(true){
if (a%51 == a%13) {
System.out.println(a);
continue;
else {
a++;
}  }  }  bu döngü bitmez

Static kelimesi için bir örnek
main içine de şunu yazalım
int c = (new Test()).sum(a:3,b:4);
System.out.println(c);

String cc=(new Test()).concat(a:"apple",b:"pie");
System.out.println(cc);

char a=get("apple");
System.out.println(a);  bu da l verir 3. karakter l dir apple için

main dışına bu methodu ekleyelim
public int sum(int a,int b){
return a+b;   3+4 7 verir
}
bunu da ekleyelim
private String concat(String a,String b){
return a+b;  applepie verir
}

private static char get(String str){
return str.charAt(3);
}

Şu şekilde de yazabiliriz method isimleri aynı olabilir a+b için

main içine de şunu yazalım
int c = (new Test()).sum(a:3,b:4);
System.out.println(c);

String cc=(new Test()).sum(a:"apple",b:"pie");
System.out.println(cc);

char a=get("apple");
System.out.println(a);  bu da l verir 3. karakter l dir apple için

main dışına bu methodu ekleyelim
public int sum(int a,int b){
return a+b;   3+4 7 verir
}
bunu da ekleyelim
private String sum(String a,String b){
return a+b;  applepie verir
}

private static char get(String str){
return str.charAt(3);
}

method isimleri concat yerine ikisinde de sum olacak şekilde değiştirdik
public static boolean imOK=true;  bu da static variabledır

Classes and Instance Variables
main içine yazalım kodlarımızı

Tiger dan = new Tiger(name:"daniel",weight:500);
dan.roar()
System.out.println(dan.roar());

main dışında class oluşturalım şimdi

class Tiger {
private int weight; // instance var
private String name;

public Tiger(String name;int weight) { //constructor
this.name=name;
this.weight=weight;
}
public String roar() {  //method
return name + " has roared";
}  }


Reference Types:
main içinde yazalım
int y =35;
String name = "Dan";
change(y);
System.out.println(y);

main dışında
private static void change(int x){
x=89;
}
sonuçta 89 değeri 35e döner

Az önce oluşturduğumuz Tiger için de ekleme yapsak main içine
Tiger dan = new Tiger(name:"dan",weight:250);
change(dan);
System.out.println(dan.name);

main dışına ekleyelim
private static void change(Tiger t) {
t.name="Oliver";
}


https://www.udemy.com/course/learn-how-to-use-all-50-java-keywords/learn/lecture/1916674?start=0#overview
1 saat
https://docs.oracle.com/javase/tutorial/

datatypes 9 --> boolean, byte,char, double, enum, float, int,long,short
byte -128 127 arası olabilir
char 1 karakter alabilir  'A' gibi. "A" olmaz
short -32768 ile 32767 arası olabilir
float 3.4444f
double 3.4444

enumeration:
public class EnumExample{
enum Menu {YES,NO,MAYBE}
public EnumExample(){
Menu options = Menu.NO;
options = Menu.YES;
}
psvm{
int noOrdinal = Menu.NO.ordinal();
Menu [] items = Menu.values();
Menu item = Menu.valueOf("YES");
}  }
ordinal değerlere sahiptir enum sıralı yani


flow control 15 --> return, if else,for continue, while do, switch case break default, try catch finally throw
listeden okuma için for
String[] countries={"US","Canada","Mexico"};
for (String country:countries){
print(country)
}

while loop
int count=10;
while (count<100){
print count;
count+=10;
}

do-while
do keywordu
count=10;
do {
count+=10;
print(count);
} while (count<100)

switch - case
psvm{
String month="Jan";
switch(month){
case "Jan":
print("Jan");
break
case "Feb":
print("Feb")
break;
default:
print("Other")
break;
} }


exceptions:
psvm{
FileReader fileInput=null;
try{
fileInput=new FileReader("Untitled.txt");
processFile(fileInput);
} catch (FileNotFoundException ex) {
print(file not found);
} catch (IOException ex){
print (IO Exception)
} finally {
fileInput.close();
print(cleanup done)
} }

psvm {
try (FileReader fileInput=new FileREader("untitled.txt")){
processFile(fileInput);
}
}
psv processFile(FileREader fileInput){
if (fileInput!=null){
} throw new UnsupportedOperationExecution("Not Supported");
}







































































































